/**
 * Gestionnaire des dropdowns pour la sidebar operatConfirme
 * Fichier JavaScript s√©par√© pour √©viter les conflits
 * Version: 1.0.0
 */

(function() {
    'use strict';

    // Configuration
    const CONFIG = {
        DEBUG: true,
        ANIMATION_DURATION: 200
    };

    // Variables globales du module
    let isInitialized = false;

    /**
     * Fonction de logging pour le debug
     */
    function log(message, data = {}) {
        if (!CONFIG.DEBUG) return;
        
        const timestamp = new Date().toISOString();
        const pageUrl = window.location.pathname;
        console.log(`üìã [SidebarDropdowns] [${timestamp}] [${pageUrl}] ${message}`, data);
    }

    /**
     * Toggle d'un dropdown par ID (pour compatibilit√© avec fonction existante)
     */
    function toggleDropdown(id) {
        log(`üîΩ toggleDropdown appel√©e pour: ${id}`);
        
        const dropdown = document.getElementById(id);
        const icon = document.getElementById(id + '-icon');
        
        if (!dropdown) {
            log(`‚ùå Dropdown non trouv√©: ${id}`);
            return;
        }
        
        const wasHidden = dropdown.classList.contains('hidden');
        dropdown.classList.toggle('hidden');
        
        if (icon) {
            icon.classList.toggle('rotate-180');
        }
        
        log(`üìä Dropdown ${id} ${wasHidden ? 'ouvert' : 'ferm√©'}`, {
            wasHidden: wasHidden,
            nowHidden: dropdown.classList.contains('hidden'),
            hasIcon: !!icon
        });
    }

    /**
     * Gestion des dropdowns avec data-target
     */
    function handleDataTargetDropdowns() {
        log('üîó Configuration des dropdowns avec data-target');
        
        const toggleButtons = document.querySelectorAll('.toggle-dropdown');
        
        log(`üìã Trouv√© ${toggleButtons.length} boutons toggle-dropdown`);
        
        toggleButtons.forEach((button, index) => {
            const target = button.getAttribute('data-target');
            const targetElement = target ? document.querySelector(target) : null;
            const chevronIcon = button.querySelector('.fa-chevron-down');
            
            log(`üîò Bouton ${index + 1}:`, {
                target: target,
                targetExists: !!targetElement,
                hasChevron: !!chevronIcon,
                buttonClasses: button.className
            });
            
            if (!targetElement) {
                log(`‚ùå √âl√©ment cible non trouv√© pour: ${target}`);
                return;
            }
            
            // Supprimer les listeners existants en clonant l'√©l√©ment
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);
            
            // R√©cup√©rer la nouvelle r√©f√©rence des √©l√©ments
            const newTargetElement = document.querySelector(target);
            const newChevronIcon = newButton.querySelector('.fa-chevron-down');
            
            newButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                log(`üñ±Ô∏è Clic sur dropdown button`, {
                    target: target,
                    currentlyHidden: newTargetElement.classList.contains('hidden')
                });
                
                const wasHidden = newTargetElement.classList.contains('hidden');
                
                // Toggle du dropdown
                newTargetElement.classList.toggle('hidden');
                
                // Animation de l'ic√¥ne chevron
                if (newChevronIcon) {
                    if (wasHidden) {
                        newChevronIcon.style.transform = 'rotate(180deg)';
                    } else {
                        newChevronIcon.style.transform = 'rotate(0deg)';
                    }
                }
                
                log(`üìä Dropdown toggle effectu√©`, {
                    target: target,
                    wasHidden: wasHidden,
                    nowHidden: newTargetElement.classList.contains('hidden'),
                    chevronRotated: newChevronIcon ? newChevronIcon.style.transform : 'no-chevron'
                });
            });
            
            log(`‚úÖ Event listener attach√© pour: ${target}`);
        });
    }

    /**
     * Fermeture des dropdowns en cliquant ailleurs
     */
    function setupOutsideClickClose() {
        log('üëÜ Configuration fermeture au clic ext√©rieur');
        
        document.addEventListener('click', function(event) {
            const dropdowns = document.querySelectorAll('#sidebar .toggle-dropdown');
            
            dropdowns.forEach(button => {
                const target = button.getAttribute('data-target');
                const dropdown = target ? document.querySelector(target) : null;
                
                if (!dropdown || dropdown.classList.contains('hidden')) {
                    return; // D√©j√† ferm√©
                }
                
                // V√©rifier si le clic est √† l'ext√©rieur du bouton et du dropdown
                if (!button.contains(event.target) && !dropdown.contains(event.target)) {
                    dropdown.classList.add('hidden');
                    
                    const chevronIcon = button.querySelector('.fa-chevron-down');
                    if (chevronIcon) {
                        chevronIcon.style.transform = 'rotate(0deg)';
                    }
                    
                    log(`üëÜ Dropdown ferm√© par clic ext√©rieur: ${target}`);
                }
            });
        });
    }

    /**
     * Diagnostic des dropdowns
     */
    function diagnosticDropdowns() {
        const diagnostic = {
            toggleButtons: [],
            dropdowns: [],
            existingFunction: typeof window.toggleDropdown === 'function'
        };
        
        // Analyse des boutons toggle
        const toggleButtons = document.querySelectorAll('.toggle-dropdown');
        toggleButtons.forEach((button, index) => {
            const target = button.getAttribute('data-target');
            const targetElement = target ? document.querySelector(target) : null;
            
            diagnostic.toggleButtons.push({
                index: index,
                target: target,
                targetExists: !!targetElement,
                buttonId: button.id,
                buttonClasses: button.className
            });
        });
        
        // Analyse des dropdowns
        const dropdowns = document.querySelectorAll('#sidebar [id*="menu"], #sidebar [id*="dropdown"]');
        dropdowns.forEach((dropdown, index) => {
            diagnostic.dropdowns.push({
                index: index,
                id: dropdown.id,
                classes: dropdown.className,
                isHidden: dropdown.classList.contains('hidden')
            });
        });
        
        log('üîç Diagnostic des dropdowns', diagnostic);
        return diagnostic;
    }

    /**
     * Initialisation du module
     */
    function initialize() {
        if (isInitialized) {
            log('‚ö†Ô∏è Module d√©j√† initialis√©, skip');
            return false;
        }
        
        log('üîß D√©but d\'initialisation des dropdowns sidebar');
        
        try {
            // Diagnostic initial
            diagnosticDropdowns();
            
            // Configuration des dropdowns avec data-target
            handleDataTargetDropdowns();
            
            // Configuration de la fermeture au clic ext√©rieur
            setupOutsideClickClose();
            
            // Exposer la fonction toggleDropdown globalement (compatibilit√©)
            if (typeof window.toggleDropdown !== 'function') {
                window.toggleDropdown = toggleDropdown;
                log('‚úÖ Fonction toggleDropdown expos√©e globalement');
            }
            
            isInitialized = true;
            log('‚úÖ Initialisation des dropdowns termin√©e avec succ√®s');
            return true;
            
        } catch (error) {
            log('üí• Erreur lors de l\'initialisation des dropdowns', {
                error: error.message,
                stack: error.stack
            });
            return false;
        }
    }

    /**
     * API publique du module
     */
    window.SidebarDropdowns = {
        // M√©thodes principales
        init: initialize,
        toggle: toggleDropdown,
        
        // M√©thodes de debug
        diagnostic: diagnosticDropdowns,
        
        // Statut
        isInitialized: () => isInitialized
    };

    /**
     * Auto-initialisation
     */
    function autoInit() {
        log('üöÄ Auto-initialisation des dropdowns sidebar');
        
        // Tentative 1: DOMContentLoaded
        if (document.readyState === 'loading') {
            log('üìÑ DOM en cours de chargement, attente DOMContentLoaded');
            document.addEventListener('DOMContentLoaded', initialize);
        } else {
            log('üìÑ DOM d√©j√† charg√©, initialisation imm√©diate');
            initialize();
        }
        
        // Tentatives de fallback
        setTimeout(() => {
            if (!isInitialized) {
                log('‚è∞ Tentative fallback (300ms)');
                initialize();
            }
        }, 300);
        
        setTimeout(() => {
            if (!isInitialized) {
                log('‚è∞ Tentative fallback (800ms)');
                initialize();
            }
        }, 800);
    }
    
    // D√©marrage automatique
    autoInit();

})();
