from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse, JsonResponse
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views.generic import ListView, DetailView
from django.core.paginator import Paginator
from django.db.models import Q
import json
import io
from datetime import datetime

from .decorators import superviseur_required, can_manage_templates, can_view_templates, can_print_etiquettes

# ReportLab imports
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4, A5, A6
from reportlab.lib.units import mm
from reportlab.lib.colors import black, white, blue, red, green
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib import colors
from .models import EtiquetteTemplate, Etiquette
from commande.models import Commande
from article.models import Article


@method_decorator(superviseur_required, name='dispatch')
class EtiquetteTemplateListView(ListView):
    """Vue pour lister les templates d'√©tiquettes"""
    model = EtiquetteTemplate
    template_name = 'etiquettes_pro/template_list.html'
    context_object_name = 'templates'
    paginate_by = 20
    
    def get_queryset(self):
        queryset = EtiquetteTemplate.objects.filter(actif=True)
        
        # Filtrage par type
        type_filter = self.request.GET.get('type')
        if type_filter:
            queryset = queryset.filter(type_etiquette=type_filter)
        
        # Recherche
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(nom__icontains=search) | 
                Q(description__icontains=search)
            )
        
        return queryset.order_by('-date_creation')


@superviseur_required
@can_print_etiquettes
def generate_etiquette_pdf(request, etiquette_id):
    """G√©n√©rer le PDF d'une √©tiquette individuelle avec ReportLab"""
    import logging
    logger = logging.getLogger(__name__)

    logger.info(f"üîç [PDF] D√©but g√©n√©ration PDF ReportLab pour √©tiquette ID: {etiquette_id}")

    etiquette = get_object_or_404(Etiquette, id=etiquette_id)
    template = etiquette.template
    
    # Cr√©er la r√©ponse HTTP
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="etiquette_{etiquette.reference}.pdf"'
    
    # D√©terminer la taille de page
    if template.format_page == 'A4':
        page_size = A4
    elif template.format_page == 'A5':
        page_size = A5
    elif template.format_page == 'A6':
        page_size = A6
    else:
        page_size = (template.largeur * mm, template.hauteur * mm)
    
    # Cr√©er le document PDF
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=page_size, 
                          leftMargin=10*mm, rightMargin=10*mm,
                          topMargin=10*mm, bottomMargin=10*mm)
    
    # Styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontName=template.police_titre,
        fontSize=template.taille_titre,
        textColor=black,
        alignment=1,  # Centr√©
        spaceAfter=12
    )
    
    text_style = ParagraphStyle(
        'CustomText',
        parent=styles['Normal'],
        fontName=template.police_texte,
        fontSize=template.taille_texte,
        textColor=black,
        spaceAfter=6
    )
    
    # Contenu de l'√©tiquette
    story = []
    
    # Styles de paragraphe pour le tableau
    cell_text_style = ParagraphStyle(
        'CellText',
        parent=styles['Normal'],
        fontName=template.police_texte,
        fontSize=template.taille_texte,
        textColor=black,
        spaceAfter=0
    )

    bold_cell_text_style = ParagraphStyle(
        'BoldCellText',
        parent=styles['Normal'],
        fontName=template.police_titre,
        fontSize=template.taille_texte,
        textColor=black,
        spaceAfter=0
    )

    white_bold_cell_text_style = ParagraphStyle(
        'WhiteBoldCellText',
        parent=styles['Normal'],
        fontName=template.police_titre,
        fontSize=template.taille_texte,
        textColor=white,
        spaceAfter=0
    )

    # Ligne 1: Code-barres et date
    barcode_content_for_table = ""

    try:
        # Utiliser les nouvelles biblioth√®ques pour g√©n√©rer les images
        if template.code_type == 'barcode' or template.code_type == 'both':
            # G√©n√©rer le code-barres avec python-barcode
            from barcode import Code128
            from barcode.writer import ImageWriter
            
            barcode_class = Code128(etiquette.code_data, writer=ImageWriter())
            # Options bas√©es sur les dimensions du template
            options = {
                'module_width': 0.3 if template.code_quality == 'ultra' else 0.4,
                'module_height': template.code_height * 0.8,  # Utiliser code_height du template
                'quiet_zone': 8.0,
                'font_size': 12,
                'text_distance': 6.0,
                'background': 'white',
                'foreground': 'black',
                'write_text': True,
                'center_text': True,
            }
            
            logger.info(f"üîç [HTML] Code-barres - Dimensions: {template.code_width}x{template.code_height}mm, Qualit√©: {template.code_quality}")
            
            # G√©n√©rer l'image en m√©moire
            img_buffer = io.BytesIO()
            barcode_class.write(img_buffer, options=options)
            img_buffer.seek(0)
            
            # Cr√©er une image ReportLab √† partir du buffer
            from reportlab.lib.utils import ImageReader
            barcode_image = Image(ImageReader(img_buffer), width=60*mm, height=25*mm)
            barcode_content_for_table = barcode_image
            
        elif template.code_type == 'qr':
            # G√©n√©rer le QR code avec qrcode
            import qrcode
            from qrcode.image.pil import PilImage
            
            # Param√®tres QR bas√©s sur les dimensions du template
            error_correction = qrcode.constants.ERROR_CORRECT_M if template.code_quality == 'ultra' else qrcode.constants.ERROR_CORRECT_L
            box_size = int(template.code_width / 8)  # Bas√© sur code_width du template
            border = 6 if template.code_quality == 'ultra' else 4
            
            qr = qrcode.QRCode(
                version=1,
                error_correction=error_correction,
                box_size=box_size,
                border=border,
            )
            
            logger.info(f"üîç [HTML] QR Code - Dimensions: {template.code_width}x{template.code_height}mm, Qualit√©: {template.code_quality}")
            qr.add_data(etiquette.code_data)
            qr.make(fit=True)
            
            # Cr√©er l'image
            img = qr.make_image(fill_color="black", back_color="white", image_factory=PilImage)
            
            # Sauvegarder en m√©moire
            img_buffer = io.BytesIO()
            img.save(img_buffer, format='PNG')
            img_buffer.seek(0)
            
            # Cr√©er une image ReportLab √† partir du buffer
            from reportlab.lib.utils import ImageReader
            barcode_content_for_table = Image(ImageReader(img_buffer), width=25*mm, height=25*mm)
            
    except Exception as e:
        # En cas d'erreur, utiliser un Paragraph avec le texte
        barcode_content_for_table = Paragraph(f"Code: {etiquette.code_data}", cell_text_style)
            
    date_text = Paragraph(datetime.now().strftime('%m/%d/%Y'), white_bold_cell_text_style)
    
    data = [
        [barcode_content_for_table, "", date_text], 
    ]
    
    # R√©cup√©rer les vraies donn√©es de la commande
    commande = None
    if etiquette.commande_id:
        try:
            commande = Commande.objects.get(id=int(etiquette.commande_id))
        except (Commande.DoesNotExist, ValueError):
            pass
    
    # Ligne 2: Informations client
    client_info_parts = []
    if etiquette.client_nom:
        client_info_parts.append(f"Client: {etiquette.client_nom}")
    elif commande and commande.client:
        client_info_parts.append(f"Client: {commande.client.nom} {commande.client.prenom}")
    
    # Utiliser les vraies informations de la commande si disponibles
    if commande and commande.client:
        if commande.client.numero_tel:
            client_info_parts.append(f"T√©l: {commande.client.numero_tel}")
        if commande.client.adresse:
            client_info_parts.append(f"Adresse: {commande.client.adresse}")
        if commande.ville:
            client_info_parts.append(f"Ville: {commande.ville.nom}")
    
    client_info_text = "<br/>".join(client_info_parts)
    data.append([Paragraph(client_info_text, cell_text_style), "", ""])
    
    # Ligne 3: S√©parateur (ligne horizontale)
    data.append([Paragraph("", cell_text_style), "", ""]) # Paragraphe vide pour le s√©parateur
    
    # Ligne 4: Article
    if etiquette.nom_article:
        article_text_content = etiquette.nom_article
    elif commande:
        article_text_content = f"Commande {commande.num_cmd or commande.id_yz}"
    else:
        article_text_content = f"Commande {etiquette.commande_id}"
    
    data.append([Paragraph(f"<b>{article_text_content}</b>", bold_cell_text_style), "", ""])
    
    # Ligne 5: S√©parateur (ligne horizontale)
    data.append([Paragraph("", cell_text_style), "", ""]) # Paragraphe vide pour le s√©parateur
    
    # Ligne 6: Prix et informations
    # Utiliser le vrai prix de la commande si disponible
    price_value = ""
    if commande and hasattr(commande, 'total_cmd') and commande.total_cmd is not None:
        price_value = f"<b>{commande.total_cmd} DH</b>"
    else:
        price_value = "<b>Prix non disponible</b>"
        
    price_text = Paragraph(f"{price_value}<br/>YOZAK", bold_cell_text_style)
    
    contact_info_parts = []
    if commande and commande.ville:
        contact_info_parts.append(f"<b>{commande.ville.nom}</b>")
    else:
        contact_info_parts.append("<b>VILLE NON D√âFINIE</b>")
        
    contact_info_parts.append("www.yoozak.com")
    contact_info_parts.append("06 34 21 56 39 / 47")
    contact_info_text = "<br/>".join(contact_info_parts)
    
    data.append([price_text, "", Paragraph(contact_info_text, white_bold_cell_text_style)])
    
    # Cr√©er le tableau
    table = Table(data, colWidths=[80*mm, 20*mm, 50*mm], rowHeights=[30*mm, None, 5*mm, None, 5*mm, None]) # Ajuster colWidths et rowHeights
    
    # Style du tableau
    table_style = TableStyle([
        # Couleurs de fond
        ('BACKGROUND', (0, 0), (0, 0), colors.lightgrey),  # Code-barres (gauche)
        ('BACKGROUND', (2, 0), (2, 0), colors.darkblue),   # Date (droite)
        ('BACKGROUND', (0, 1), (-1, 1), colors.white),      # Client
        ('BACKGROUND', (0, 3), (-1, 3), colors.white),      # Article
        ('BACKGROUND', (0, 5), (1, 5), colors.white),      # Prix (gauche)
        ('BACKGROUND', (2, 5), (2, 5), colors.darkblue),   # Contact (droite)
        
        # Bordures
        ('BOX', (0, 0), (-1, -1), 1, colors.black),
        ('LINEBELOW', (0, 0), (-1, 0), 1, colors.black), # Bordure sous la premi√®re ligne
        ('LINEBELOW', (0, 2), (-1, 2), 1, colors.black),
        ('LINEBELOW', (0, 4), (-1, 4), 1, colors.black),
        
        # Alignement
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        
        # Alignements sp√©cifiques
        ('ALIGN', (2, 0), (2, 0), 'CENTER'), # Date
        ('ALIGN', (0, 3), (-1, 3), 'CENTER'), # Article
        ('ALIGN', (2, 5), (2, 5), 'CENTER'), # Contact
        
        # Padding
        ('LEFTPADDING', (0, 0), (-1, -1), 5),
        ('RIGHTPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        
        # Taille de police pour le texte de la date et contact
        ('FONTSIZE', (2, 0), (2, 0), template.taille_texte),
        ('FONTSIZE', (2, 5), (2, 5), template.taille_texte),
        ('LEADING', (2, 5), (2, 5), 10), # Espacement des lignes pour le contact
    ])
    
    table.setStyle(table_style)
    story.append(table)
    story.append(Spacer(1, 10*mm))
    
    # Construire le PDF
    doc.build(story)
    
    # R√©cup√©rer le contenu du buffer
    pdf_content = buffer.getvalue()
    buffer.close()
    
    # Marquer l'√©tiquette comme imprim√©e
    etiquette.statut = 'printed'
    etiquette.date_impression = datetime.now()
    etiquette.save()
    
    response.write(pdf_content)
    return response


def generate_etiquette_pdf_pillow(request, etiquette_id):
    """G√©n√©rer le PDF d'une √©tiquette avec Pillow (sans ReportLab)"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîç [PDF] D√©but g√©n√©ration PDF pour √©tiquette ID: {etiquette_id}")
    
    etiquette = get_object_or_404(Etiquette, id=etiquette_id)
    template = etiquette.template
    
    try:
        # Cr√©er l'image de l'√©tiquette avec Pillow - 100% Dynamique bas√© sur le template
        from PIL import Image, ImageDraw, ImageFont
        
        # Dimensions dynamiques bas√©es sur le template - OPTIMIS√â SELON QUALIT√â
        # DPI bas√© sur la qualit√© choisie dans le template
        dpi_map = {
            'standard': 300,
            'high': 600,
            'ultra': 600,  # 4K Ultra
        }
        dpi = dpi_map.get(template.code_quality, 600)
        mm_to_px = dpi / 25.4  # Conversion mm vers pixels
        
        logger.info(f"üîç [PDF] Qualit√© s√©lectionn√©e: {template.code_quality} (DPI: {dpi})")
        
        # Utiliser les dimensions du template
        if template.format_page == 'CUSTOM':
            width = int(template.largeur * mm_to_px)
            height = int(template.hauteur * mm_to_px)
        else:
            # Dimensions standard
            dimensions = {
                'A4': (210, 297),
                'A5': (148, 210),
                'A6': (105, 148),
            }
            largeur_mm, hauteur_mm = dimensions.get(template.format_page, (105, 148))
            width = int(largeur_mm * mm_to_px)
            height = int(hauteur_mm * mm_to_px)
        
        logger.info(f"üîç [PDF] Dimensions dynamiques: {width}x{height} pixels ({template.format_page})")
        
        # Cr√©er l'image avec anti-aliasing
        img = Image.new('RGB', (width, height), 'white')
        draw = ImageDraw.Draw(img)
        
        # Charger les polices dynamiques bas√©es sur le template - 100% RESPECT DU TEMPLATE
        try:
            # Mapper les polices du template vers les polices syst√®me
            font_mapping = {
                'Helvetica-Bold': 'arialbd.ttf',
                'Helvetica': 'arial.ttf',
                'Arial-Bold': 'arialbd.ttf',
                'Arial': 'arial.ttf',
                'Times-Bold': 'timesbd.ttf',
                'Times': 'times.ttf',
                'Courier-Bold': 'courbd.ttf',
                'Courier': 'cour.ttf',
            }
            
            # Utiliser les polices d√©finies dans le template
            title_font_name = font_mapping.get(template.police_titre, 'arialbd.ttf')
            text_font_name = font_mapping.get(template.police_texte, 'arial.ttf')
            
            title_font = ImageFont.truetype(title_font_name, int(template.taille_titre * dpi / 72))
            text_font = ImageFont.truetype(text_font_name, int(template.taille_texte * dpi / 72))
            small_font = ImageFont.truetype(text_font_name, int(template.taille_texte * 0.8 * dpi / 72))
            # Police pour les codes (plus fine pour 4K)
            code_font = ImageFont.truetype(text_font_name, int(template.taille_texte * 0.7 * dpi / 72))
            logger.info(f"‚úÖ [PDF] Polices charg√©es selon template: {template.police_titre} ({template.taille_titre}pt), {template.police_texte} ({template.taille_texte}pt) - DPI: {dpi}")
        except Exception as e:
            # Fallback si les polices ne sont pas disponibles
            title_font = ImageFont.load_default()
            text_font = ImageFont.load_default()
            small_font = ImageFont.load_default()
            code_font = ImageFont.load_default()
            logger.warning(f"‚ö†Ô∏è [PDF] Polices par d√©faut utilis√©es (erreur: {e})")
            logger.warning(f"‚ö†Ô∏è [PDF] Utilisation des polices par d√©faut")
        
        # Couleurs dynamiques bas√©es sur le template
        def hex_to_rgb(hex_color):
            """Convertir hex en RGB"""
            hex_color = hex_color.lstrip('#')
            return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        
        couleur_principale = hex_to_rgb(template.couleur_principale)
        couleur_secondaire = hex_to_rgb(template.couleur_secondaire)
        couleur_texte = hex_to_rgb(template.couleur_texte)
        couleur_bordure = hex_to_rgb(template.border_color)
        white = (255, 255, 255)
        
        logger.info(f"üîç [PDF] Couleurs dynamiques: Principal={couleur_principale}, Secondaire={couleur_secondaire}, Texte={couleur_texte}, Bordure={couleur_bordure}")
        
        # Fonction pour dessiner des rectangles avec coins arrondis
        def draw_rounded_rectangle(draw, xy, fill=None, outline=None, width=1, radius=0):
            """Dessiner un rectangle avec coins arrondis"""
            x1, y1, x2, y2 = xy
            if radius == 0:
                draw.rectangle(xy, fill=fill, outline=outline, width=width)
                return
            
            # Dessiner les coins arrondis
            draw.ellipse([x1, y1, x1 + 2*radius, y1 + 2*radius], fill=fill, outline=outline, width=width)  # Coin sup√©rieur gauche
            draw.ellipse([x2 - 2*radius, y1, x2, y1 + 2*radius], fill=fill, outline=outline, width=width)  # Coin sup√©rieur droit
            draw.ellipse([x1, y2 - 2*radius, x1 + 2*radius, y2], fill=fill, outline=outline, width=width)  # Coin inf√©rieur gauche
            draw.ellipse([x2 - 2*radius, y2 - 2*radius, x2, y2], fill=fill, outline=outline, width=width)  # Coin inf√©rieur droit
            
            # Dessiner les rectangles pour remplir les c√¥t√©s
            draw.rectangle([x1 + radius, y1, x2 - radius, y2], fill=fill, outline=outline, width=width)  # Horizontal
            draw.rectangle([x1, y1 + radius, x2, y2 - radius], fill=fill, outline=outline, width=width)  # Vertical
        
        # Ligne 1: Code-barres et date - OPTIMIS√â 4K ULTRA
        code_area_height = int(35 * mm_to_px)  # 35mm en pixels 4K Ultra (plus d'espace)
        date_area_width = int(45 * mm_to_px)   # 45mm en pixels 4K Ultra
        
        # Fond pour le code-barres avec bordures arrondies
        border_radius_px = int(template.border_radius * mm_to_px)
        border_width_px = int(template.border_width * mm_to_px)
        
        if template.border_enabled:
            draw_rounded_rectangle(draw, [0, 0, width - date_area_width, code_area_height], 
                                 fill=couleur_secondaire, outline=couleur_bordure, 
                                 width=border_width_px, radius=border_radius_px)
        else:
            draw.rectangle([0, 0, width - date_area_width, code_area_height], fill=couleur_secondaire)
        
        # G√©n√©rer le code-barres ou QR code en haute r√©solution
        code_img = None
        if template.code_type == 'barcode' or template.code_type == 'both':
            logger.info(f"üîç [PDF] G√©n√©ration code-barres dynamique avec python-barcode")
            from barcode import Code128
            from barcode.writer import ImageWriter
            
            barcode_class = Code128(etiquette.code_data, writer=ImageWriter())
            # Options dynamiques bas√©es sur le template - DIMENSIONS PERSONNALIS√âES
            # Calculer les dimensions bas√©es sur les param√®tres du template
            module_width_factor = 0.3 if template.code_quality == 'ultra' else 0.4
            module_height_factor = 1.2 if template.code_quality == 'ultra' else 1.0
            font_size_factor = 1.2 if template.code_quality == 'ultra' else 1.0
            
            options = {
                'module_width': module_width_factor * dpi / 72,
                'module_height': (template.code_height * module_height_factor) * dpi / 72,  # Utiliser code_height du template
                'quiet_zone': 8.0 * dpi / 72,
                'font_size': int(template.taille_texte * font_size_factor * dpi / 72),
                'text_distance': 6.0 * dpi / 72,
                'background': 'white',
                'foreground': 'black',
                'write_text': True,
                'center_text': True,
            }
            
            logger.info(f"üîç [PDF] Code-barres - Dimensions: {template.code_width}x{template.code_height}mm, Qualit√©: {template.code_quality}")
            
            code_buffer = io.BytesIO()
            barcode_class.write(code_buffer, options=options)
            code_buffer.seek(0)
            code_img = Image.open(code_buffer)
            
        elif template.code_type == 'qr':
            logger.info(f"üîç [PDF] G√©n√©ration QR code dynamique avec qrcode")
            import qrcode
            from qrcode.image.pil import PilImage
            
            # Calculer les param√®tres QR bas√©s sur la qualit√© et les dimensions du template
            error_correction = qrcode.constants.ERROR_CORRECT_M if template.code_quality == 'ultra' else qrcode.constants.ERROR_CORRECT_L
            box_size_factor = 6 if template.code_quality == 'ultra' else 8
            border_factor = 6 if template.code_quality == 'ultra' else 4
            
            qr = qrcode.QRCode(
                version=1,
                error_correction=error_correction,
                box_size=int((template.code_width / box_size_factor) * dpi / 72),  # Utiliser code_width du template
                border=int(border_factor * dpi / 72),
            )
            
            logger.info(f"üîç [PDF] QR Code - Dimensions: {template.code_width}x{template.code_height}mm, Qualit√©: {template.code_quality}")
            qr.add_data(etiquette.code_data)
            qr.make(fit=True)
            
            code_img = qr.make_image(fill_color="black", back_color="white", image_factory=PilImage)
        
        # Coller le code sur l'image avec positionnement dynamique - DIMENSIONS PERSONNALIS√âES
        if code_img:
            # Redimensionner le code bas√© sur les dimensions personnalis√©es du template
            # Utiliser code_width et code_height du template, avec fallback sur code_size
            code_max_width = int(template.code_width * mm_to_px) if template.code_width else int(template.code_size * mm_to_px)
            code_max_height = int(template.code_height * mm_to_px) if template.code_height else int(template.code_size * mm_to_px)
            
            # Calculer le ratio pour le redimensionnement
            img_ratio = code_img.width / code_img.height
            box_ratio = code_max_width / code_max_height
            
            if img_ratio > box_ratio:
                new_width = code_max_width
                new_height = int(new_width / img_ratio)
            else:
                new_height = code_max_height
                new_width = int(new_height * img_ratio)

            # Redimensionnement avec qualit√© bas√©e sur le template
            code_img = code_img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # Am√©liorer la nettet√© selon la qualit√© choisie
            if template.code_quality == 'ultra':
                from PIL import ImageFilter
                code_img = code_img.filter(ImageFilter.SHARPEN)
            
            # Positionnement dynamique bas√© sur le template
            if template.code_position == 'left':
                code_x = int(5 * mm_to_px)
            elif template.code_position == 'right':
                code_x = int(width*0.7) - new_width - int(5 * mm_to_px)
            else:  # center
                code_x = (int(width*0.7) - new_width) // 2
            
            code_y = (code_area_height - new_height) // 2
            
            img.paste(code_img, (code_x, code_y))
            logger.info(f"‚úÖ [PDF] Code coll√©: {template.code_type} ({template.code_width}x{template.code_height}mm) √† position {template.code_position} - Qualit√©: {template.code_quality}")
        else:
            # Texte de substitution en cas d'√©chec
            fallback_text = "Code non disponible"
            text_width_fb = draw.textlength(fallback_text, font=small_font)
            text_x_fb = (int(width*0.7) - text_width_fb) // 2
            text_y_fb = (code_area_height - int(10 * dpi / 72)) // 2
            draw.text((text_x_fb, text_y_fb), fallback_text, fill=couleur_texte, font=small_font)
            logger.warning(f"‚ö†Ô∏è [PDF] Code image non g√©n√©r√©e, affichage du texte de substitution.")
        
        # Fond pour la date avec bordures arrondies
        date_x = width - date_area_width
        if template.border_enabled:
            draw_rounded_rectangle(draw, [date_x, 0, width, code_area_height], 
                                 fill=couleur_principale, outline=couleur_bordure, 
                                 width=border_width_px, radius=border_radius_px)
        else:
            draw.rectangle([date_x, 0, width, code_area_height], fill=couleur_principale)
        
        # Centrer la date dans l'espace
        date_text = datetime.now().strftime('%m/%d/%Y')
        date_text_width = draw.textlength(date_text, font=text_font)
        date_text_x = date_x + (date_area_width - date_text_width) // 2
        date_text_y = (code_area_height - int(template.taille_texte * dpi / 72)) // 2
        draw.text((date_text_x, date_text_y), date_text, fill=white, font=text_font)
        
        # Calculer le total d'articles AVANT de l'utiliser
        total_articles = 0
        if etiquette.cart_items:
            total_articles = sum(item.get('quantite', 0) for item in etiquette.cart_items)
        
        # Afficher le total d'articles dans un cercle au milieu entre ID YZ et date
        if total_articles > 0:
            # Position du cercle (au milieu entre la zone du code et la zone de date)
            circle_x = date_x - int(15 * mm_to_px)  # 15mm avant la zone de date
            circle_y = int(code_area_height / 2)  # Au milieu verticalement
            circle_radius = int(6 * mm_to_px)  # 6mm de rayon
            
            # Dessiner le cercle
            draw.ellipse([circle_x - circle_radius, circle_y - circle_radius, 
                         circle_x + circle_radius, circle_y + circle_radius], 
                        fill=couleur_principale, outline=couleur_bordure, width=border_width_px)
            
            # Centrer le texte dans le cercle
            total_text = str(total_articles)
            text_width = draw.textlength(total_text, font=small_font)
            text_height = int(template.taille_texte * 0.7 * dpi / 72)
            text_x = circle_x - text_width // 2
            text_y = circle_y - text_height // 2
            
            draw.text((text_x, text_y), total_text, fill=white, font=small_font)
        
        # R√©cup√©rer les vraies donn√©es de la commande
        commande = None
        if etiquette.commande_id:
            try:
                commande = Commande.objects.get(id=int(etiquette.commande_id))
                logger.info(f"‚úÖ [PDF] Commande trouv√©e: {commande.num_cmd}")
            except (Commande.DoesNotExist, ValueError):
                pass
        
        # Le total d'articles a d√©j√† √©t√© calcul√© plus haut
        
        # Ligne 2: Informations client - OPTIMIS√â 4K ULTRA
        y_pos = int(40 * mm_to_px)  # 40mm en pixels 4K Ultra (plus d'espace)
        margin_x = int(6 * mm_to_px)  # 6mm de marge pour 4K Ultra
        
        client_info_parts = []
        if etiquette.client_nom:
            client_info_parts.append(f"Client: {etiquette.client_nom}")
        elif commande and commande.client:
            client_info_parts.append(f"Client: {commande.client.nom} {commande.client.prenom}")
        
        if commande and commande.client:
            if commande.client.numero_tel:
                client_info_parts.append(f"T√©l: {commande.client.numero_tel}")
            if commande.client.adresse:
                client_info_parts.append(f"Adresse: {commande.client.adresse}")
            if commande.ville:
                client_info_parts.append(f"Ville: {commande.ville.nom}")
        
        line_height = int(7 * mm_to_px)  # 7mm entre les lignes pour 4K Ultra
        for info in client_info_parts:
            draw.text((margin_x, y_pos), info, fill=couleur_texte, font=text_font)
            y_pos += line_height
        
        # Section Panier - DYNAMIQUE
        if etiquette.cart_items:
            y_pos += int(5 * mm_to_px) # Espace avant le panier
            draw.text((margin_x, y_pos), "Articles du panier:", fill=couleur_texte, font=text_font)
            y_pos += int(6 * mm_to_px)
            for item in etiquette.cart_items:
                item_text = f"- {item.get('nom', '')} {item.get('variante', '')} x{item.get('quantite', 1)}"
                draw.text((margin_x + int(5 * mm_to_px), y_pos), item_text, fill=couleur_texte, font=small_font)
                y_pos += int(5 * mm_to_px)
            y_pos += int(5 * mm_to_px) # Espace apr√®s le panier

        # Ligne de s√©paration - OPTIMIS√â 4K ULTRA
        y_pos += int(4 * mm_to_px)  # 4mm d'espace pour 4K Ultra
        line_width = int(0.8 * mm_to_px)  # 0.8mm d'√©paisseur pour 4K Ultra
        draw.line([(margin_x, y_pos), (width - margin_x, y_pos)], fill=couleur_texte, width=line_width)
        y_pos += int(6 * mm_to_px)  # 6mm d'espace apr√®s la ligne pour 4K Ultra
        
        # Ligne 4: Prix et contact - Dynamique selon le type d'√©tiquette
        if template.type_etiquette == 'livraison':
            # Pour les √©tiquettes de livraison, afficher le prix
            price_value = "Prix non disponible"
            if commande and commande.total_cmd:
                price_value = f"{commande.total_cmd} DH"
            draw.text((margin_x, y_pos), price_value, fill=couleur_texte, font=title_font)
            draw.text((margin_x, y_pos + int(10 * mm_to_px)), "YOZAK", fill=couleur_texte, font=text_font)
        elif template.type_etiquette == 'article':
            # Pour les √©tiquettes d'article, afficher le nom de l'article
            article_name = etiquette.nom_article or "Article non d√©fini"
            draw.text((margin_x, y_pos), article_name, fill=couleur_texte, font=title_font)
            draw.text((margin_x, y_pos + int(10 * mm_to_px)), "YOZAK", fill=couleur_texte, font=text_font)
        elif template.type_etiquette == 'commande':
            # Pour les √©tiquettes de commande, afficher le num√©ro de commande
            cmd_ref = etiquette.reference or "Commande non d√©finie"
            draw.text((margin_x, y_pos), cmd_ref, fill=couleur_texte, font=title_font)
            draw.text((margin_x, y_pos + int(10 * mm_to_px)), "YOZAK", fill=couleur_texte, font=text_font)
        elif template.type_etiquette == 'stock':
            # Pour les √©tiquettes de stock, afficher les informations de stock
            stock_info = "Stock disponible"
            draw.text((margin_x, y_pos), stock_info, fill=couleur_texte, font=title_font)
            draw.text((margin_x, y_pos + int(10 * mm_to_px)), "YOZAK", fill=couleur_texte, font=text_font)
        else:
            # Par d√©faut, afficher le prix
            price_value = "Prix non disponible"
            if commande and commande.total_cmd:
                price_value = f"{commande.total_cmd} DH"
            draw.text((margin_x, y_pos), price_value, fill=couleur_texte, font=title_font)
            draw.text((margin_x, y_pos + int(10 * mm_to_px)), "YOZAK", fill=couleur_texte, font=text_font)
        
        # Informations de contact - Dynamique bas√© sur le template
        contact_city = "VILLE NON D√âFINIE"
        if commande and commande.ville:
            contact_city = commande.ville.nom
        
        contact_info = [
            contact_city,
            "www.yoozak.com",
            "06 34 21 56 39 / 47"
        ]
        
        # Zone de contact dynamique - OPTIMIS√â 4K ULTRA
        contact_area_width = int(55 * mm_to_px)  # 55mm de largeur pour 4K Ultra
        contact_area_height = int(30 * mm_to_px)  # 30mm de hauteur pour 4K Ultra
        contact_x = width - contact_area_width - margin_x
        contact_y = y_pos
        
        # Fond pour le contact avec bordures arrondies
        if template.border_enabled:
            draw_rounded_rectangle(draw, [contact_x, contact_y, width - margin_x, contact_y + contact_area_height], 
                                 fill=couleur_principale, outline=couleur_bordure, 
                                 width=border_width_px, radius=border_radius_px)
        else:
            draw.rectangle([contact_x, contact_y, width - margin_x, contact_y + contact_area_height], fill=couleur_principale)
        
        # Centrer le texte de contact dans la zone - OPTIMIS√â 4K ULTRA
        contact_text_y = contact_y + int(4 * mm_to_px)  # 4mm de marge pour 4K Ultra
        for info in contact_info:
            contact_text_width = draw.textlength(info, font=text_font)
            contact_text_x = contact_x + (contact_area_width - contact_text_width) // 2
            draw.text((contact_text_x, contact_text_y), info, fill=white, font=text_font)
            contact_text_y += int(7 * mm_to_px)  # 7mm entre les lignes pour 4K Ultra
        
        # Ajouter la bordure principale autour de tout le ticket
        if template.border_enabled:
            # Bordure ext√©rieure avec coins arrondis
            draw_rounded_rectangle(draw, [0, 0, width-1, height-1], 
                                 fill=None, outline=couleur_bordure, 
                                 width=border_width_px, radius=border_radius_px)
            logger.info(f"‚úÖ [PDF] Bordure principale ajout√©e: {template.border_width}mm, couleur: {template.border_color}")
        
        logger.info(f"‚úÖ [PDF] Image 4K Ultra de l'√©tiquette cr√©√©e avec succ√®s ({width}x{height} pixels, DPI: {dpi})")
        
        # Convertir l'image en PDF avec qualit√© optimale - OPTIMIS√â 4K ULTRA
        pdf_buffer = io.BytesIO()
        # Sauvegarder avec qualit√© maximale et DPI sp√©cifi√© - OPTIMIS√â 4K ULTRA
        img.save(pdf_buffer, format='PDF', quality=100, dpi=(dpi, dpi), optimize=False)
        pdf_buffer.seek(0)
        
        # Cr√©er la r√©ponse HTTP avec headers optimis√©s
        response = HttpResponse(pdf_buffer.getvalue(), content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="etiquette_{etiquette.reference}_4K_Ultra.pdf"'
        response['Content-Length'] = str(len(pdf_buffer.getvalue()))
        response['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response['Pragma'] = 'no-cache'
        response['Expires'] = '0'
        
        # Marquer l'√©tiquette comme imprim√©e
        etiquette.statut = 'printed'
        etiquette.date_impression = datetime.now()
        etiquette.save()
        
        logger.info(f"‚úÖ [PDF] PDF g√©n√©r√© avec succ√®s")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå [PDF] Erreur lors de la g√©n√©ration: {str(e)}")
        logger.error(f"‚ùå [PDF] Type d'erreur: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå [PDF] Traceback: {traceback.format_exc()}")
        
        # Retourner une erreur
        return HttpResponse(f'Erreur de g√©n√©ration PDF: {str(e)}', status=500)


@superviseur_required
def generate_barcode_image(request, code_data):
    """G√©n√©rer une image de code-barres pour l'aper√ßu avec python-barcode"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîç [BARCODE] D√©but g√©n√©ration - code_data: '{code_data}'")
    logger.info(f"üîç [BARCODE] URL demand√©e: {request.get_full_path()}")
    logger.info(f"üîç [BARCODE] User-Agent: {request.META.get('HTTP_USER_AGENT', 'N/A')}")
    
    try:
        logger.info(f"üîç [BARCODE] Cr√©ation du code-barres avec python-barcode")
        
        # Utiliser python-barcode pour g√©n√©rer le code-barres
        from barcode import Code128
        from barcode.writer import ImageWriter
        
        # Cr√©er le code-barres
        barcode_class = Code128(code_data, writer=ImageWriter())
        
        # Options pour l'image
        options = {
            'module_width': 0.4,  # Largeur des barres
            'module_height': 15.0,  # Hauteur des barres
            'quiet_zone': 6.5,  # Zone de silence
            'font_size': 10,  # Taille de la police
            'text_distance': 5.0,  # Distance entre le code et le texte
            'background': 'white',
            'foreground': 'black',
        }
        
        # G√©n√©rer l'image en m√©moire
        img_buffer = io.BytesIO()
        barcode_class.write(img_buffer, options=options)
        img_buffer.seek(0)
        
        image_size = len(img_buffer.getvalue())
        logger.info(f"‚úÖ [BARCODE] Image PNG g√©n√©r√©e avec python-barcode - Taille: {image_size} bytes")
        
        response = HttpResponse(img_buffer.getvalue(), content_type='image/png')
        response['Content-Length'] = str(image_size)
        response['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response['Pragma'] = 'no-cache'
        response['Expires'] = '0'
        
        logger.info(f"‚úÖ [BARCODE] R√©ponse HTTP cr√©√©e avec succ√®s")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå [BARCODE] Erreur lors de la g√©n√©ration: {str(e)}")
        logger.error(f"‚ùå [BARCODE] Type d'erreur: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå [BARCODE] Traceback: {traceback.format_exc()}")
        
        # Retourner une image d'erreur simple
        error_response = HttpResponse(
            f'<svg width="200" height="40" xmlns="http://www.w3.org/2000/svg"><rect width="200" height="40" fill="red"/><text x="10" y="25" fill="white" font-size="12">Erreur: {str(e)}</text></svg>',
            content_type='image/svg+xml'
        )
        return error_response

@superviseur_required
def generate_qrcode_image(request, code_data):
    """G√©n√©rer une image de QR code pour l'aper√ßu avec qrcode"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîç [QRCODE] D√©but g√©n√©ration - code_data: '{code_data}'")
    logger.info(f"üîç [QRCODE] URL demand√©e: {request.get_full_path()}")
    logger.info(f"üîç [QRCODE] User-Agent: {request.META.get('HTTP_USER_AGENT', 'N/A')}")
    
    try:
        logger.info(f"üîç [QRCODE] Cr√©ation du QR code avec qrcode")
        
        # Utiliser qrcode pour g√©n√©rer le QR code
        import qrcode
        from qrcode.image.pil import PilImage
        
        # Cr√©er le QR code
        qr = qrcode.QRCode(
            version=1,  # Version du QR code (1-40)
            error_correction=qrcode.constants.ERROR_CORRECT_L,  # Niveau de correction d'erreur
            box_size=10,  # Taille de chaque bo√Æte en pixels
            border=4,  # Taille de la bordure
        )
        
        # Ajouter les donn√©es
        qr.add_data(code_data)
        qr.make(fit=True)
        
        # Cr√©er l'image
        img = qr.make_image(fill_color="black", back_color="white", image_factory=PilImage)
        
        # Sauvegarder en m√©moire
        img_buffer = io.BytesIO()
        img.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        image_size = len(img_buffer.getvalue())
        logger.info(f"‚úÖ [QRCODE] Image PNG g√©n√©r√©e avec qrcode - Taille: {image_size} bytes")
        
        response = HttpResponse(img_buffer.getvalue(), content_type='image/png')
        response['Content-Length'] = str(image_size)
        response['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response['Pragma'] = 'no-cache'
        response['Expires'] = '0'
        
        logger.info(f"‚úÖ [QRCODE] R√©ponse HTTP cr√©√©e avec succ√®s")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå [QRCODE] Erreur lors de la g√©n√©ration: {str(e)}")
        logger.error(f"‚ùå [QRCODE] Type d'erreur: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå [QRCODE] Traceback: {traceback.format_exc()}")
        
        # Retourner une image d'erreur simple
        error_response = HttpResponse(
            f'<svg width="40" height="40" xmlns="http://www.w3.org/2000/svg"><rect width="40" height="40" fill="red"/><text x="5" y="25" fill="white" font-size="8">Erreur: {str(e)}</text></svg>',
            content_type='image/svg+xml'
        )
        return error_response

@superviseur_required
def etiquettes_dashboard(request):
    """Tableau de bord des √©tiquettes"""
    context = {
        'templates_count': EtiquetteTemplate.objects.filter(actif=True).count(),
        'etiquettes_count': Etiquette.objects.count(),
        'etiquettes_ready': Etiquette.objects.filter(statut='ready').count(),
        'etiquettes_printed': Etiquette.objects.filter(statut='printed').count(),
        'recent_templates': EtiquetteTemplate.objects.filter(actif=True).order_by('-date_creation')[:5],
        'recent_etiquettes': Etiquette.objects.order_by('-date_creation')[:10],
    }
    return render(request, 'etiquettes_pro/dashboard.html', context)


@superviseur_required
@can_manage_templates
def create_template(request):
    """Cr√©er un nouveau template d'√©tiquette"""
    if request.method == 'POST':
        try:
            # R√©cup√©ration des donn√©es du formulaire
            nom = request.POST.get('nom')
            description = request.POST.get('description', '')
            type_etiquette = request.POST.get('type_etiquette')
            format_page = request.POST.get('format_page')
            try:
                largeur_str = request.POST.get('largeur', '210')
                hauteur_str = request.POST.get('hauteur', '297')
                largeur = float(largeur_str) if largeur_str else 210.0
                hauteur = float(hauteur_str) if hauteur_str else 297.0
            except ValueError:
                largeur = 210.0
                hauteur = 297.0
            code_type = request.POST.get('code_type')
            try:
                code_size_str = request.POST.get('code_size', '80')
                code_size = int(code_size_str) if code_size_str else 80
            except ValueError:
                code_size = 80
            code_position = request.POST.get('code_position')
            police_titre = request.POST.get('police_titre')
            try:
                taille_titre_str = request.POST.get('taille_titre', '16')
                taille_titre = int(taille_titre_str) if taille_titre_str else 16
            except ValueError:
                taille_titre = 16
            police_texte = request.POST.get('police_texte')
            try:
                taille_texte_str = request.POST.get('taille_texte', '12')
                taille_texte = int(taille_texte_str) if taille_texte_str else 12
            except ValueError:
                taille_texte = 12
            couleur_principale = request.POST.get('couleur_principale', '#3B82F6')
            couleur_secondaire = request.POST.get('couleur_secondaire', '#1E40AF')
            couleur_texte = request.POST.get('couleur_texte', '#1F2937')
            actif = request.POST.get('actif') == 'on'
            
            # Validation des donn√©es requises
            if not nom or not type_etiquette or not format_page or not code_type:
                messages.error(request, 'Veuillez remplir tous les champs obligatoires.')
                return render(request, 'etiquettes_pro/template_form.html')
            
            # Cr√©ation du template
            template = EtiquetteTemplate.objects.create(
                nom=nom,
                description=description,
                type_etiquette=type_etiquette,
                format_page=format_page,
                largeur=largeur,
                hauteur=hauteur,
                code_type=code_type,
                code_size=code_size,
                code_position=code_position,
                police_titre=police_titre,
                taille_titre=taille_titre,
                police_texte=police_texte,
                taille_texte=taille_texte,
                couleur_principale=couleur_principale,
                couleur_secondaire=couleur_secondaire,
                couleur_texte=couleur_texte,
                actif=actif,
                cree_par=request.user
            )
            
            messages.success(request, f'Template "{nom}" cr√©√© avec succ√®s!')
            return redirect('etiquettes_pro:template_detail', pk=template.pk)
            
        except Exception as e:
            messages.error(request, f'Erreur lors de la cr√©ation du template: {str(e)}')
            return render(request, 'etiquettes_pro/template_form.html')
    
    return render(request, 'etiquettes_pro/template_form.html')


@superviseur_required
@can_view_templates
def template_detail(request, pk):
    """D√©tail d'un template"""
    template = get_object_or_404(EtiquetteTemplate, pk=pk)
    return render(request, 'etiquettes_pro/template_detail.html', {'template': template})


@superviseur_required
@can_manage_templates
def edit_template(request, pk):
    """Modifier un template"""
    template = get_object_or_404(EtiquetteTemplate, pk=pk)
    
    if request.method == 'POST':
        try:
            # R√©cup√©ration des donn√©es du formulaire
            template.nom = request.POST.get('nom')
            template.description = request.POST.get('description', '')
            template.type_etiquette = request.POST.get('type_etiquette')
            template.format_page = request.POST.get('format_page')
            try:
                largeur_str = request.POST.get('largeur', '210')
                hauteur_str = request.POST.get('hauteur', '297')
                template.largeur = float(largeur_str) if largeur_str else 210.0
                template.hauteur = float(hauteur_str) if hauteur_str else 297.0
            except ValueError:
                template.largeur = 210.0
                template.hauteur = 297.0
            template.code_type = request.POST.get('code_type')
            try:
                code_size_str = request.POST.get('code_size', '80')
                template.code_size = int(code_size_str) if code_size_str else 80
            except ValueError:
                template.code_size = 80
            template.code_position = request.POST.get('code_position')
            template.police_titre = request.POST.get('police_titre')
            try:
                taille_titre_str = request.POST.get('taille_titre', '16')
                template.taille_titre = int(taille_titre_str) if taille_titre_str else 16
            except ValueError:
                template.taille_titre = 16
            template.police_texte = request.POST.get('police_texte')
            try:
                taille_texte_str = request.POST.get('taille_texte', '12')
                template.taille_texte = int(taille_texte_str) if taille_texte_str else 12
            except ValueError:
                template.taille_texte = 12
            template.couleur_principale = request.POST.get('couleur_principale', '#3B82F6')
            template.couleur_secondaire = request.POST.get('couleur_secondaire', '#1E40AF')
            template.couleur_texte = request.POST.get('couleur_texte', '#1F2937')
            template.actif = request.POST.get('actif') == 'on'
            
            # Validation des donn√©es requises
            if not template.nom or not template.type_etiquette or not template.format_page or not template.code_type:
                messages.error(request, 'Veuillez remplir tous les champs obligatoires.')
                return render(request, 'etiquettes_pro/template_form.html', {'template': template})
            
            # Sauvegarde du template
            template.save()
            
            messages.success(request, f'Template "{template.nom}" modifi√© avec succ√®s!')
            return redirect('etiquettes_pro:template_detail', pk=template.pk)
            
        except Exception as e:
            messages.error(request, f'Erreur lors de la modification du template: {str(e)}')
            return render(request, 'etiquettes_pro/template_form.html', {'template': template})
    
    return render(request, 'etiquettes_pro/template_form.html', {'template': template})


@superviseur_required
@can_manage_templates
def delete_template(request, pk):
    """Supprimer un template"""
    template = get_object_or_404(EtiquetteTemplate, pk=pk)
    # TODO: Impl√©menter la suppression
    return redirect('etiquettes_pro:template_list')


@superviseur_required
def etiquette_list(request):
    """Liste des √©tiquettes avec filtres et pagination"""
    # R√©cup√©rer les param√®tres de filtrage
    search = request.GET.get('search', '')
    statut = request.GET.get('statut', '')
    template_id = request.GET.get('template', '')
    
    # Construire la requ√™te de base
    etiquettes = Etiquette.objects.select_related('template', 'cree_par').order_by('-date_creation')
    
    # Appliquer les filtres
    if search:
        etiquettes = etiquettes.filter(
            Q(reference__icontains=search) | 
            Q(template__nom__icontains=search) |
            Q(commande_id__icontains=search) |
            Q(nom_article__icontains=search) |
            Q(client_nom__icontains=search)
        )
    
    if statut:
        etiquettes = etiquettes.filter(statut=statut)
    
    if template_id:
        etiquettes = etiquettes.filter(template_id=template_id)
    
    # Pagination
    paginator = Paginator(etiquettes, 20)  # 20 √©tiquettes par page
    page_number = request.GET.get('page')
    etiquettes_page = paginator.get_page(page_number)
    
    # Statistiques
    total_count = Etiquette.objects.count()
    draft_count = Etiquette.objects.filter(statut='draft').count()
    ready_count = Etiquette.objects.filter(statut='ready').count()
    printed_count = Etiquette.objects.filter(statut='printed').count()
    
    # Templates pour le filtre
    templates = EtiquetteTemplate.objects.filter(actif=True).order_by('nom')
    
    context = {
        'etiquettes': etiquettes_page,
        'templates': templates,
        'total_count': total_count,
        'draft_count': draft_count,
        'ready_count': ready_count,
        'printed_count': printed_count,
    }
    
    return render(request, 'etiquettes_pro/etiquette_list.html', context)


@superviseur_required
def preview_etiquette(request, etiquette_id):
    """Aper√ßu d'une √©tiquette"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîç [PREVIEW] D√©but aper√ßu √©tiquette ID: {etiquette_id}")
    
    etiquette = get_object_or_404(Etiquette, id=etiquette_id)
    logger.info(f"üîç [PREVIEW] √âtiquette trouv√©e - Reference: {etiquette.reference}")
    logger.info(f"üîç [PREVIEW] Template: {etiquette.template.nom} (code_type: {etiquette.template.code_type})")
    logger.info(f"üîç [PREVIEW] Code_data: '{etiquette.code_data}'")
    logger.info(f"üîç [PREVIEW] Commande_id: '{etiquette.commande_id}'")
    
    commande = None
    if etiquette.commande_id:
        try:
            commande = Commande.objects.get(id=int(etiquette.commande_id))
            logger.info(f"‚úÖ [PREVIEW] Commande trouv√©e - ID: {commande.id}, Num: {commande.num_cmd}")
            logger.info(f"‚úÖ [PREVIEW] Client: {commande.client.nom} {commande.client.prenom}")
            logger.info(f"‚úÖ [PREVIEW] Total: {commande.total_cmd}")
        except (Commande.DoesNotExist, ValueError) as e:
            logger.warning(f"‚ö†Ô∏è [PREVIEW] Commande non trouv√©e: {e}")
            pass
    else:
        logger.warning(f"‚ö†Ô∏è [PREVIEW] Pas de commande_id dans l'√©tiquette")
    
    # Calculer le total d'articles pour l'affichage
    total_articles = 0
    if etiquette.cart_items:
        total_articles = sum(item.get('quantite', 0) for item in etiquette.cart_items)
            
    context = {
        'etiquette': etiquette,
        'commande': commande,
        'total_articles': total_articles,
    }
    
    logger.info(f"‚úÖ [PREVIEW] Contexte pr√©par√©, rendu du template")
    return render(request, 'etiquettes_pro/etiquette_preview.html', context)


def api_template_list(request):
    """API pour lister les templates"""
    templates = EtiquetteTemplate.objects.filter(actif=True)
    data = [{'id': t.id, 'nom': t.nom, 'type': t.type_etiquette} for t in templates]
    return JsonResponse({'templates': data})


def api_etiquette_list(request):
    """API pour lister les √©tiquettes"""
    etiquettes = Etiquette.objects.all()[:50]  # Limiter √† 50
    data = [{'id': e.id, 'reference': e.reference, 'statut': e.statut} for e in etiquettes]
    return JsonResponse({'etiquettes': data})


@superviseur_required
@can_print_etiquettes
def generate_etiquettes_commandes_confirmees(request):
    """G√©n√©rer automatiquement des √©tiquettes pour toutes les commandes confirm√©es"""
    try:
        # R√©cup√©rer le template par d√©faut
        template = EtiquetteTemplate.objects.filter(
            nom='Template Livraison Standard',
            actif=True
        ).first()
        
        if not template:
            messages.error(request, 'Template par d√©faut "Template Livraison Standard" non trouv√©. Veuillez le cr√©er d\'abord.')
            return redirect('etiquettes_pro:dashboard')
        
        # R√©cup√©rer uniquement les commandes qui ont des articles dans leur panier
        commandes_avec_articles = Commande.objects.filter(
            paniers__isnull=False
        ).select_related('client').distinct()
        
        if not commandes_avec_articles.exists():
            messages.info(request, 'Aucune commande avec des articles dans le panier trouv√©e.')
            return redirect('etiquettes_pro:dashboard')
        
        # G√©n√©rer les √©tiquettes
        etiquettes_creees = []
        for commande in commandes_avec_articles:
            # V√©rifier si une √©tiquette existe d√©j√† pour cette commande
            etiquette_existante = Etiquette.objects.filter(
                commande_id=str(commande.id),
                template=template
            ).first()
            
            if etiquette_existante:
                continue  # Passer cette commande si l'√©tiquette existe d√©j√†
            
            # R√©cup√©rer les vrais articles de la commande depuis le mod√®le Panier
            cart_items_data = []
            for panier in commande.paniers.all():
                # Construire le nom de la variante
                variante_nom = "Standard"
                if panier.variante:
                    couleur = panier.variante.couleur.nom if panier.variante.couleur else ""
                    pointure = panier.variante.pointure.pointure if panier.variante.pointure else ""
                    if couleur and pointure:
                        variante_nom = f"{couleur} {pointure}"
                    elif couleur:
                        variante_nom = couleur
                    elif pointure:
                        variante_nom = pointure
                
                item_data = {
                    "nom": panier.article.nom,
                    "variante": variante_nom,
                    "quantite": panier.quantite,
                    "prix_unitaire": float(panier.sous_total / panier.quantite) if panier.quantite > 0 else 0,
                    "sous_total": float(panier.sous_total)
                }
                cart_items_data.append(item_data)
            
            # Cr√©er l'√©tiquette
            etiquette = Etiquette.objects.create(
                template=template,
                reference=f"{commande.id:06d}",
                nom_article=f"Commande {commande.num_cmd or commande.id_yz}",
                commande_id=str(commande.id),
                client_nom=f"{commande.client.nom} {commande.client.prenom}" if commande.client else "",
                code_data=f"{commande.id:06d}",
                statut='ready',
                cree_par=request.user,
                cart_items=cart_items_data  # Ajouter les articles du panier
            )
            etiquettes_creees.append(etiquette)
        
        if etiquettes_creees:
            messages.success(request, f'{len(etiquettes_creees)} √©tiquettes g√©n√©r√©es avec succ√®s pour les commandes avec articles.')
        else:
            messages.info(request, 'Toutes les commandes avec articles ont d√©j√† des √©tiquettes.')
        
        return redirect('etiquettes_pro:etiquettes_commandes_confirmees')
        
    except Exception as e:
        messages.error(request, f'Erreur lors de la g√©n√©ration des √©tiquettes: {str(e)}')
        return redirect('etiquettes_pro:dashboard')


@superviseur_required
def etiquettes_commandes_confirmees(request):
    """Afficher les √©tiquettes des commandes confirm√©es"""
    # R√©cup√©rer le template par d√©faut
    template = EtiquetteTemplate.objects.filter(
        nom='Template Livraison Standard',
        actif=True
    ).first()
    
    if not template:
        messages.error(request, 'Template par d√©faut non trouv√©.')
        return redirect('etiquettes_pro:dashboard')
    
    # R√©cup√©rer les √©tiquettes des commandes confirm√©es
    etiquettes = Etiquette.objects.filter(
        template=template,
        commande_id__isnull=False
    ).select_related('template', 'cree_par').order_by('-date_creation')
    
    # Pagination
    paginator = Paginator(etiquettes, 20)
    page_number = request.GET.get('page')
    etiquettes_page = paginator.get_page(page_number)
    
    # Statistiques
    total_etiquettes = etiquettes.count()
    etiquettes_ready = etiquettes.filter(statut='ready').count()
    etiquettes_printed = etiquettes.filter(statut='printed').count()
    
    # R√©cup√©rer les commandes avec articles sans √©tiquettes
    commandes_avec_etiquettes = set(etiquettes.values_list('commande_id', flat=True))
    commandes_avec_articles = Commande.objects.filter(
        paniers__isnull=False
    ).select_related('client').distinct()
    
    commandes_sans_etiquettes = commandes_avec_articles.exclude(
        id__in=[int(cmd_id) for cmd_id in commandes_avec_etiquettes if cmd_id.isdigit()]
    )
    
    context = {
        'etiquettes': etiquettes_page,
        'template': template,
        'total_etiquettes': total_etiquettes,
        'etiquettes_ready': etiquettes_ready,
        'etiquettes_printed': etiquettes_printed,
        'commandes_sans_etiquettes_count': commandes_sans_etiquettes.count(),
        'commandes_avec_articles_count': commandes_avec_articles.count(),
    }
    
    return render(request, 'etiquettes_pro/etiquettes_commandes_confirmees.html', context)