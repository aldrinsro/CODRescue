from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse, JsonResponse
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils.decorators import method_decorator
from django.views.generic import ListView, DetailView
from django.core.paginator import Paginator
from django.db.models import Q
import json
import io
import base64
from datetime import datetime

from .decorators import superviseur_required, can_manage_templates, can_view_templates, can_print_etiquettes
from commande.models import Commande

# ReportLab imports
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4, A5, A6
from reportlab.lib.units import mm
from reportlab.lib.colors import black, white, blue, red, green
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib import colors
import qrcode
from io import BytesIO
from .models import EtiquetteTemplate, Etiquette
from commande.models import Commande
from article.models import Article


@method_decorator(superviseur_required, name='dispatch')
class EtiquetteTemplateListView(ListView):
    """Vue pour lister les templates d'√©tiquettes"""
    model = EtiquetteTemplate
    template_name = 'etiquettes_pro/template_list.html'
    context_object_name = 'templates'
    paginate_by = 20
    
    def get_queryset(self):
        queryset = EtiquetteTemplate.objects.filter(actif=True)
        
        # Filtrage par type
        type_filter = self.request.GET.get('type')
        if type_filter:
            queryset = queryset.filter(type_etiquette=type_filter)
        
        # Recherche
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(nom__icontains=search) | 
                Q(description__icontains=search)
            )
        
        return queryset.order_by('-date_creation')




# Fonction de g√©n√©ration PDF supprim√©e


@superviseur_required
def generate_barcode_image(request, code_data):
    """G√©n√©rer une image de code-barres pour l'aper√ßu avec python-barcode"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîç [BARCODE] D√©but g√©n√©ration - code_data: '{code_data}'")
    logger.info(f"üîç [BARCODE] URL demand√©e: {request.get_full_path()}")
    logger.info(f"üîç [BARCODE] User-Agent: {request.META.get('HTTP_USER_AGENT', 'N/A')}")
    
    try:
        logger.info(f"üîç [BARCODE] Cr√©ation du code-barres avec python-barcode")
        
        # Utiliser python-barcode pour g√©n√©rer le code-barres
        from barcode import Code128
        from barcode.writer import ImageWriter
        
        # Cr√©er le code-barres
        barcode_class = Code128(code_data, writer=ImageWriter())
        
        # Options pour l'image
        options = {
            'module_width': 0.4,  # Largeur des barres
            'module_height': 15.0,  # Hauteur des barres
            'quiet_zone': 6.5,  # Zone de silence
            'font_size': 10,  # Taille de la police
            'text_distance': 5.0,  # Distance entre le code et le texte
            'background': 'white',
            'foreground': 'black',
        }
        
        # G√©n√©rer l'image en m√©moire
        img_buffer = io.BytesIO()
        barcode_class.write(img_buffer, options=options)
        img_buffer.seek(0)
            
        image_size = len(img_buffer.getvalue())
        logger.info(f"‚úÖ [BARCODE] Image PNG g√©n√©r√©e avec python-barcode - Taille: {image_size} bytes")
        
        response = HttpResponse(img_buffer.getvalue(), content_type='image/png')
        response['Content-Length'] = str(image_size)
        response['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response['Pragma'] = 'no-cache'
        response['Expires'] = '0'
        
        logger.info(f"‚úÖ [BARCODE] R√©ponse HTTP cr√©√©e avec succ√®s")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå [BARCODE] Erreur lors de la g√©n√©ration: {str(e)}")
        logger.error(f"‚ùå [BARCODE] Type d'erreur: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå [BARCODE] Traceback: {traceback.format_exc()}")
        
        # Retourner une image d'erreur simple
        error_response = HttpResponse(
            f'<svg width="200" height="40" xmlns="http://www.w3.org/2000/svg"><rect width="200" height="40" fill="red"/><text x="10" y="25" fill="white" font-size="12">Erreur: {str(e)}</text></svg>',
            content_type='image/svg+xml'
        )
        return error_response

@superviseur_required
def generate_qrcode_image(request, code_data):
    """G√©n√©rer une image de QR code pour l'aper√ßu avec qrcode"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîç [QRCODE] D√©but g√©n√©ration - code_data: '{code_data}'")
    logger.info(f"üîç [QRCODE] URL demand√©e: {request.get_full_path()}")
    logger.info(f"üîç [QRCODE] User-Agent: {request.META.get('HTTP_USER_AGENT', 'N/A')}")
    
    try:
        logger.info(f"üîç [QRCODE] Cr√©ation du QR code avec qrcode")
        
        # Utiliser qrcode pour g√©n√©rer le QR code
        import qrcode
        from qrcode.image.pil import PilImage
        
        # Cr√©er le QR code
        qr = qrcode.QRCode(
            version=1,  # Version du QR code (1-40)
            error_correction=qrcode.constants.ERROR_CORRECT_L,  # Niveau de correction d'erreur
            box_size=10,  # Taille de chaque bo√Æte en pixels
            border=4,  # Taille de la bordure
        )
        
        # Ajouter les donn√©es
        qr.add_data(code_data)
        qr.make(fit=True)
        
        # Cr√©er l'image
        img = qr.make_image(fill_color="black", back_color="white", image_factory=PilImage)
        
        # Sauvegarder en m√©moire
        img_buffer = io.BytesIO()
        img.save(img_buffer, format='PNG')
        img_buffer.seek(0)
                
        image_size = len(img_buffer.getvalue())
        logger.info(f"‚úÖ [QRCODE] Image PNG g√©n√©r√©e avec qrcode - Taille: {image_size} bytes")
        
        response = HttpResponse(img_buffer.getvalue(), content_type='image/png')
        response['Content-Length'] = str(image_size)
        response['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response['Pragma'] = 'no-cache'
        response['Expires'] = '0'
        
        logger.info(f"‚úÖ [QRCODE] R√©ponse HTTP cr√©√©e avec succ√®s")
        return response
            
    except Exception as e:
        logger.error(f"‚ùå [QRCODE] Erreur lors de la g√©n√©ration: {str(e)}")
        logger.error(f"‚ùå [QRCODE] Type d'erreur: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå [QRCODE] Traceback: {traceback.format_exc()}")
        
        # Retourner une image d'erreur simple
        error_response = HttpResponse(
            f'<svg width="40" height="40" xmlns="http://www.w3.org/2000/svg"><rect width="40" height="40" fill="red"/><text x="5" y="25" fill="white" font-size="8">Erreur: {str(e)}</text></svg>',
            content_type='image/svg+xml'
        )
        return error_response

@superviseur_required
def etiquettes_dashboard(request):
    """Tableau de bord des √©tiquettes"""
    # R√©cup√©rer les commandes confirm√©es avec paniers
    from commande.models import Commande
    commandes_confirmees_avec_paniers = Commande.objects.filter(
        paniers__isnull=False,
        etats__enum_etat__libelle='Confirm√©e',  # SANS espace √† la fin
        etats__date_fin__isnull=True  # √âtat actuel (non termin√©)
    ).select_related('client', 'ville').distinct()
    
    # R√©cup√©rer les √©tiquettes des commandes confirm√©es avec paniers uniquement
    commandes_ids = [cmd.id for cmd in commandes_confirmees_avec_paniers]
    all_etiquettes = Etiquette.objects.filter(
        commande_id__in=commandes_ids
    ).select_related('template').order_by('-date_creation')
    
    # Pr√©parer les donn√©es des √©tiquettes avec leurs commandes
    all_etiquettes_with_commandes = []
    for etiquette in all_etiquettes:
        etiquette_data = {
            'etiquette': etiquette,
            'commande': None,
            'etat_commande': None
        }
        
        if etiquette.commande_id:
            try:
                commande = Commande.objects.select_related('client', 'ville').get(id=int(etiquette.commande_id))
                etiquette_data['commande'] = commande
                etiquette_data['etat_commande'] = commande.etat_actuel
            except (Commande.DoesNotExist, ValueError):
                pass
        
        all_etiquettes_with_commandes.append(etiquette_data)
    
    # Statistiques (seulement pour les √©tiquettes des commandes confirm√©es)
    total_count = all_etiquettes.count()
    draft_count = all_etiquettes.filter(statut='draft').count()
    ready_count = all_etiquettes.filter(statut='ready').count()
    printed_count = all_etiquettes.filter(statut='printed').count()
    
    context = {
        'templates_count': EtiquetteTemplate.objects.filter(actif=True).count(),
        'etiquettes_count': total_count,
        'etiquettes_ready': ready_count,
        'etiquettes_printed': printed_count,
        'recent_templates': EtiquetteTemplate.objects.filter(actif=True).order_by('-date_creation')[:5],
        # Donn√©es pour la pagination intelligente du tableau (commandes confirm√©es uniquement)
        'all_etiquettes_with_commandes': all_etiquettes_with_commandes,
        'total_count': total_count,
        'draft_count': draft_count,
        'ready_count': ready_count,
        'printed_count': printed_count,
    }
    return render(request, 'etiquettes_pro/dashboard.html', context)


@superviseur_required
@can_print_etiquettes
def generate_qr_codes_articles(request, etiquette_id):
    """G√©n√©rer les codes QR pour tous les articles du panier de la commande confirm√©e"""
    try:
        # R√©cup√©rer l'√©tiquette
        etiquette = get_object_or_404(Etiquette, id=etiquette_id)
        
        # R√©cup√©rer la commande associ√©e
        if not etiquette.commande_id:
            return JsonResponse({
                'success': False,
                'error': 'Aucune commande associ√©e √† cette √©tiquette'
            }, status=400)
        
        commande = get_object_or_404(Commande, id=int(etiquette.commande_id))
        
        # V√©rifier que la commande est confirm√©e
        etat_actuel = commande.etat_actuel
        if not etat_actuel or not etat_actuel.enum_etat or etat_actuel.enum_etat.libelle != 'Confirm√©e':
            return JsonResponse({
                'success': False,
                'error': 'La commande doit √™tre confirm√©e pour g√©n√©rer les codes QR'
            }, status=400)
        
        # R√©cup√©rer tous les articles du panier
        paniers = commande.paniers.select_related('article', 'variante').all()
        
        if not paniers.exists():
            return JsonResponse({
                'success': False,
                'error': 'Aucun article trouv√© dans le panier de cette commande'
            }, status=400)
        
        # Pr√©parer les donn√©es pour le template
        articles_data = []
        
        for panier in paniers:
            article = panier.article
            variante = panier.variante
            
            # G√©n√©rer le code QR
            qr_content = f"{article.reference or article.nom}"
            if variante and variante.reference_variante:
                qr_content = variante.reference_variante
            
            # Ajouter l'ID de commande au contenu du QR code
            if commande.id_yz:
                qr_content = f"{qr_content}|CMD:{commande.id_yz}"
            
            # Cr√©er le QR code
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=6,
                border=4,
            )
            qr.add_data(qr_content)
            qr.make(fit=True)
            
            # Convertir en image base64 pour l'affichage HTML
            qr_img = qr.make_image(fill_color="black", back_color="white")
            img_buffer = BytesIO()
            qr_img.save(img_buffer, format='PNG')
            img_buffer.seek(0)
            
            qr_base64 = base64.b64encode(img_buffer.getvalue()).decode()
            
            # Pr√©parer les donn√©es de l'article
            article_data = {
                'article': article,
                'variante': variante,
                'panier': panier,
                'qr_content': qr_content,
                'qr_image': f"data:image/png;base64,{qr_base64}"
            }
            
            articles_data.append(article_data)
        
        # Rendre le template HTML pour l'impression
        context = {
            'commande': commande,
            'etiquette': etiquette,
            'articles_data': articles_data,
            'template': etiquette.template,  # Ajouter le template pour le format
        }
        
        return render(request, 'etiquettes_pro/qr_codes_print.html', context)
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la g√©n√©ration des codes QR: {str(e)}'
        }, status=500)


@superviseur_required
@can_print_etiquettes
def generate_qr_codes_simple(request, etiquette_id):
    """G√©n√©rer les codes QR simples (sans d√©tails) pour tous les articles du panier de la commande confirm√©e"""
    try:
        # R√©cup√©rer l'√©tiquette
        etiquette = get_object_or_404(Etiquette, id=etiquette_id)
        
        # R√©cup√©rer la commande associ√©e
        if not etiquette.commande_id:
            return JsonResponse({
                'success': False,
                'error': 'Aucune commande associ√©e √† cette √©tiquette'
            }, status=400)
        
        commande = get_object_or_404(Commande, id=int(etiquette.commande_id))
        
        # V√©rifier que la commande est confirm√©e
        etat_actuel = commande.etat_actuel
        if not etat_actuel or not etat_actuel.enum_etat or etat_actuel.enum_etat.libelle != 'Confirm√©e':
            return JsonResponse({
                'success': False,
                'error': 'La commande doit √™tre confirm√©e pour g√©n√©rer les codes QR'
            }, status=400)
        
        # R√©cup√©rer tous les articles du panier
        paniers = commande.paniers.select_related('article', 'variante').all()
        
        if not paniers.exists():
            return JsonResponse({
                'success': False,
                'error': 'Aucun article trouv√© dans le panier de cette commande'
            }, status=400)
        
        # Pr√©parer les donn√©es pour le template
        articles_data = []
        
        for panier in paniers:
            article = panier.article
            variante = panier.variante
            
            # G√©n√©rer le code QR
            qr_content = f"{article.reference or article.nom}"
            if variante and variante.reference_variante:
                qr_content = variante.reference_variante
            
            # Ajouter l'ID de commande au contenu du QR code
            if commande.id_yz:
                qr_content = f"{qr_content}|CMD:{commande.id_yz}"
            
            # Cr√©er le QR code
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=8,
                border=4,
            )
            qr.add_data(qr_content)
            qr.make(fit=True)
            
            # Convertir en image base64 pour l'affichage HTML
            qr_img = qr.make_image(fill_color="black", back_color="white")
            img_buffer = BytesIO()
            qr_img.save(img_buffer, format='PNG')
            img_buffer.seek(0)
            
            qr_base64 = base64.b64encode(img_buffer.getvalue()).decode()
            
            # Pr√©parer les donn√©es de l'article (seulement pour la quantit√©)
            article_data = {
                'article': article,
                'variante': variante,
                'panier': panier,
                'qr_content': qr_content,
                'qr_image': f"data:image/png;base64,{qr_base64}"
            }
            
            articles_data.append(article_data)
        
        # Rendre le template HTML pour l'impression simple
        context = {
            'commande': commande,
            'etiquette': etiquette,
            'articles_data': articles_data,
            'template': etiquette.template,  # Ajouter le template pour le format
        }
        
        return render(request, 'etiquettes_pro/qr_codes_simple_print.html', context)
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la g√©n√©ration des codes QR: {str(e)}'
        }, status=500)


@superviseur_required
@can_print_etiquettes
@require_http_methods(["POST"])
def bulk_print_qr_codes_simple(request):
    """Impression multiple des codes QR simples pour plusieurs √©tiquettes s√©lectionn√©es"""
    try:
        # R√©cup√©rer les IDs des √©tiquettes s√©lectionn√©es
        etiquette_ids = request.POST.getlist('etiquette_ids[]')
        
        if not etiquette_ids:
            return JsonResponse({
                'success': False,
                'error': 'Aucune √©tiquette s√©lectionn√©e'
            }, status=400)
        
        # R√©cup√©rer les √©tiquettes
        etiquettes = Etiquette.objects.filter(id__in=etiquette_ids).select_related('template')
        
        if not etiquettes.exists():
            return JsonResponse({
                'success': False,
                'error': 'Aucune √©tiquette valide trouv√©e'
            }, status=400)
        
        # Pr√©parer les donn√©es pour toutes les √©tiquettes
        all_articles_data = []
        commandes_info = []
        
        for etiquette in etiquettes:
            if not etiquette.commande_id:
                continue
                
            # R√©cup√©rer la commande par son ID
            try:
                commande = Commande.objects.select_related('client').get(id=int(etiquette.commande_id))
            except (Commande.DoesNotExist, ValueError):
                continue
            
            # V√©rifier que la commande est confirm√©e
            etat_actuel = commande.etat_actuel
            if not etat_actuel or not etat_actuel.enum_etat or etat_actuel.enum_etat.libelle != 'Confirm√©e':
                continue
            
            # R√©cup√©rer tous les articles du panier
            paniers = commande.paniers.select_related('article', 'variante').all()
            
            if not paniers.exists():
                continue
            
            # Ajouter les infos de la commande
            commandes_info.append({
                'commande': commande,
                'etiquette': etiquette,
                'paniers_count': paniers.count()
            })
            
            # G√©n√©rer les codes QR pour chaque article
            for panier in paniers:
                article = panier.article
                variante = panier.variante
                
                # G√©n√©rer le code QR
                qr_content = f"{article.reference or article.nom}"
                if variante and variante.reference_variante:
                    qr_content = variante.reference_variante
                
                # Ajouter l'ID de commande au contenu du QR code
                if commande.id_yz:
                    qr_content = f"{qr_content}|CMD:{commande.id_yz}"
                
                # Cr√©er le QR code
                qr = qrcode.QRCode(
                    version=1,
                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                    box_size=8,
                    border=4,
                )
                qr.add_data(qr_content)
                qr.make(fit=True)
                
                # Convertir en image base64 pour l'affichage HTML
                qr_img = qr.make_image(fill_color="black", back_color="white")
                img_buffer = BytesIO()
                qr_img.save(img_buffer, format='PNG')
                img_buffer.seek(0)
                
                qr_base64 = base64.b64encode(img_buffer.getvalue()).decode()
                
                # R√©p√©ter selon la quantit√©
                for i in range(panier.quantite):
                    article_data = {
                        'article': article,
                        'variante': variante,
                        'panier': panier,
                        'qr_content': qr_content,
                        'qr_image': f"data:image/png;base64,{qr_base64}",
                        'commande_num': commande.num_cmd,
                        'etiquette_id': etiquette.id
                    }
                    all_articles_data.append(article_data)
        
        if not all_articles_data:
            return JsonResponse({
                'success': False,
                'error': 'Aucun code QR √† g√©n√©rer pour les √©tiquettes s√©lectionn√©es'
            }, status=400)
        
        # Rendre le template HTML pour l'impression multiple
        context = {
            'commandes_info': commandes_info,
            'all_articles_data': all_articles_data,
            'total_qr_codes': len(all_articles_data),
            'template': EtiquetteTemplate.objects.filter(format_page='10x10').first() or EtiquetteTemplate.objects.first(),  # Template par d√©faut 10x10
        }
        
        return render(request, 'etiquettes_pro/bulk_qr_codes_simple_print.html', context)
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la g√©n√©ration des codes QR: {str(e)}'
        }, status=500)


@superviseur_required
@can_print_etiquettes
@require_http_methods(["POST"])
def bulk_print_qr_codes_details(request):
    """Impression multiple des codes QR avec d√©tails pour plusieurs √©tiquettes s√©lectionn√©es"""
    try:
        # R√©cup√©rer les IDs des √©tiquettes s√©lectionn√©es
        etiquette_ids = request.POST.getlist('etiquette_ids[]')
        
        if not etiquette_ids:
            return JsonResponse({
                'success': False,
                'error': 'Aucune √©tiquette s√©lectionn√©e'
            }, status=400)
        
        # R√©cup√©rer les √©tiquettes
        etiquettes = Etiquette.objects.filter(id__in=etiquette_ids).select_related('template')
        
        if not etiquettes.exists():
            return JsonResponse({
                'success': False,
                'error': 'Aucune √©tiquette valide trouv√©e'
            }, status=400)
        
        # Pr√©parer les donn√©es pour toutes les √©tiquettes
        all_articles_data = []
        commandes_info = []
        
        for etiquette in etiquettes:
            if not etiquette.commande_id:
                continue
                
            # R√©cup√©rer la commande par son ID
            try:
                commande = Commande.objects.select_related('client').get(id=int(etiquette.commande_id))
            except (Commande.DoesNotExist, ValueError):
                continue
            
            # V√©rifier que la commande est confirm√©e
            etat_actuel = commande.etat_actuel
            if not etat_actuel or not etat_actuel.enum_etat or etat_actuel.enum_etat.libelle != 'Confirm√©e':
                continue
            
            # R√©cup√©rer tous les articles du panier
            paniers = commande.paniers.select_related('article', 'variante').all()
            
            if not paniers.exists():
                continue
            
            # Ajouter les infos de la commande
            commandes_info.append({
                'commande': commande,
                'etiquette': etiquette,
                'paniers_count': paniers.count()
            })
            
            # G√©n√©rer les codes QR pour chaque article
            for panier in paniers:
                article = panier.article
                variante = panier.variante
                
                # G√©n√©rer le code QR
                qr_content = f"{article.reference or article.nom}"
                if variante and variante.reference_variante:
                    qr_content = variante.reference_variante
                
                # Ajouter l'ID de commande au contenu du QR code
                if commande.id_yz:
                    qr_content = f"{qr_content}|CMD:{commande.id_yz}"
        
                # Cr√©er le QR code
                qr = qrcode.QRCode(
                    version=1,
                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                    box_size=6,
                    border=4,
                )
                qr.add_data(qr_content)
                qr.make(fit=True)
                
                # Convertir en image base64 pour l'affichage HTML
                qr_img = qr.make_image(fill_color="black", back_color="white")
                img_buffer = BytesIO()
                qr_img.save(img_buffer, format='PNG')
                img_buffer.seek(0)
                
                qr_base64 = base64.b64encode(img_buffer.getvalue()).decode()
                
                # R√©p√©ter selon la quantit√©
                for i in range(panier.quantite):
                    article_data = {
                        'article': article,
                        'variante': variante,
                        'panier': panier,
                        'qr_content': qr_content,
                        'qr_image': f"data:image/png;base64,{qr_base64}",
                        'commande_num': commande.num_cmd,
                        'etiquette_id': etiquette.id
                    }
                    all_articles_data.append(article_data)
        
        if not all_articles_data:
            return JsonResponse({
                'success': False,
                'error': 'Aucun code QR √† g√©n√©rer pour les √©tiquettes s√©lectionn√©es'
            }, status=400)
        
        # Rendre le template HTML pour l'impression multiple
        context = {
            'commandes_info': commandes_info,
            'all_articles_data': all_articles_data,
            'total_qr_codes': len(all_articles_data),
            'template': EtiquetteTemplate.objects.filter(format_page='10x10').first() or EtiquetteTemplate.objects.first(),  # Template par d√©faut 10x10
        }
        
        return render(request, 'etiquettes_pro/bulk_qr_codes_details_print.html', context)
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la g√©n√©ration des codes QR: {str(e)}'
        }, status=500)


@superviseur_required
@can_manage_templates
def create_template(request):
    """Cr√©er un nouveau template d'√©tiquette"""
    if request.method == 'POST':
        try:
            # R√©cup√©ration des donn√©es du formulaire
            nom = request.POST.get('nom')
            description = request.POST.get('description', '')
            type_etiquette = request.POST.get('type_etiquette')
            format_page = request.POST.get('format_page')
            try:
                largeur_str = request.POST.get('largeur', '210')
                hauteur_str = request.POST.get('hauteur', '297')
                largeur = float(largeur_str) if largeur_str else 210.0
                hauteur = float(hauteur_str) if hauteur_str else 297.0
            except ValueError:
                largeur = 210.0
                hauteur = 297.0
            code_type = request.POST.get('code_type')
            try:
                code_size_str = request.POST.get('code_size', '80')
                code_size = int(code_size_str) if code_size_str else 80
            except ValueError:
                code_size = 80
            code_position = request.POST.get('code_position')
            police_titre = request.POST.get('police_titre')
            try:
                taille_titre_str = request.POST.get('taille_titre', '16')
                taille_titre = int(taille_titre_str) if taille_titre_str else 16
            except ValueError:
                taille_titre = 16
            police_texte = request.POST.get('police_texte')
            try:
                taille_texte_str = request.POST.get('taille_texte', '12')
                taille_texte = int(taille_texte_str) if taille_texte_str else 12
            except ValueError:
                taille_texte = 12
            couleur_principale = request.POST.get('couleur_principale', '#3B82F6')
            couleur_secondaire = request.POST.get('couleur_secondaire', '#1E40AF')
            couleur_texte = request.POST.get('couleur_texte', '#1F2937')
            actif = request.POST.get('actif') == 'on'
            
            # Validation des donn√©es requises
            if not nom or not type_etiquette or not format_page or not code_type:
                messages.error(request, 'Veuillez remplir tous les champs obligatoires.')
                return render(request, 'etiquettes_pro/template_form.html')
            
            # Cr√©ation du template
            template = EtiquetteTemplate.objects.create(
                nom=nom,
                description=description,
                type_etiquette=type_etiquette,
                format_page=format_page,
                largeur=largeur,
                hauteur=hauteur,
                code_type=code_type,
                code_size=code_size,
                code_position=code_position,
                police_titre=police_titre,
                taille_titre=taille_titre,
                police_texte=police_texte,
                taille_texte=taille_texte,
                couleur_principale=couleur_principale,
                couleur_secondaire=couleur_secondaire,
                couleur_texte=couleur_texte,
                actif=actif,
                cree_par=request.user
            )
            
            messages.success(request, f'Template "{nom}" cr√©√© avec succ√®s!')
            return redirect('etiquettes_pro:template_detail', pk=template.pk)
            
        except Exception as e:
            messages.error(request, f'Erreur lors de la cr√©ation du template: {str(e)}')
            return render(request, 'etiquettes_pro/template_form.html')
    
    return render(request, 'etiquettes_pro/template_form.html')


@superviseur_required
@can_view_templates
def template_detail(request, pk):
    """D√©tail d'un template"""
    template = get_object_or_404(EtiquetteTemplate, pk=pk)
    return render(request, 'etiquettes_pro/template_detail.html', {'template': template})


@superviseur_required
@can_manage_templates
def edit_template(request, pk):
    """Modifier un template"""
    template = get_object_or_404(EtiquetteTemplate, pk=pk)
    
    if request.method == 'POST':
        try:
            # R√©cup√©ration des donn√©es du formulaire
            template.nom = request.POST.get('nom')
            template.description = request.POST.get('description', '')
            template.type_etiquette = request.POST.get('type_etiquette')
            template.format_page = request.POST.get('format_page')
            try:
                largeur_str = request.POST.get('largeur', '210')
                hauteur_str = request.POST.get('hauteur', '297')
                template.largeur = float(largeur_str) if largeur_str else 210.0
                template.hauteur = float(hauteur_str) if hauteur_str else 297.0
            except ValueError:
                template.largeur = 210.0
                template.hauteur = 297.0
            template.code_type = request.POST.get('code_type')
            try:
                code_size_str = request.POST.get('code_size', '80')
                template.code_size = int(code_size_str) if code_size_str else 80
            except ValueError:
                template.code_size = 80
            template.code_position = request.POST.get('code_position')
            template.police_titre = request.POST.get('police_titre')
            try:
                taille_titre_str = request.POST.get('taille_titre', '16')
                template.taille_titre = int(taille_titre_str) if taille_titre_str else 16
            except ValueError:
                template.taille_titre = 16
            template.police_texte = request.POST.get('police_texte')
            try:
                taille_texte_str = request.POST.get('taille_texte', '12')
                template.taille_texte = int(taille_texte_str) if taille_texte_str else 12
            except ValueError:
                template.taille_texte = 12
            template.couleur_principale = request.POST.get('couleur_principale', '#3B82F6')
            template.couleur_secondaire = request.POST.get('couleur_secondaire', '#1E40AF')
            template.couleur_texte = request.POST.get('couleur_texte', '#1F2937')
            template.actif = request.POST.get('actif') == 'on'
            
            # Validation des donn√©es requises
            if not template.nom or not template.type_etiquette or not template.format_page or not template.code_type:
                messages.error(request, 'Veuillez remplir tous les champs obligatoires.')
                return render(request, 'etiquettes_pro/template_form.html', {'template': template})
            
            # Sauvegarde du template
            template.save()
            
            messages.success(request, f'Template "{template.nom}" modifi√© avec succ√®s!')
            return redirect('etiquettes_pro:template_detail', pk=template.pk)
            
        except Exception as e:
            messages.error(request, f'Erreur lors de la modification du template: {str(e)}')
            return render(request, 'etiquettes_pro/template_form.html', {'template': template})
    
    return render(request, 'etiquettes_pro/template_form.html', {'template': template})


@superviseur_required
@can_manage_templates
@require_http_methods(["DELETE"])
def delete_template(request, pk):
    """Supprimer un template d'√©tiquette"""
    try:
        template = get_object_or_404(EtiquetteTemplate, pk=pk)
        nom_template = template.nom

        # V√©rifier s'il y a des √©tiquettes qui utilisent ce template
        etiquettes_count = template.etiquettes.count()
        if etiquettes_count > 0:
            return JsonResponse({
                'success': False,
                'error': (
                    f'Impossible de supprimer le template "{nom_template}". '
                    f'{etiquettes_count} √©tiquette(s) l\'utilisent encore.'
                )
            }, status=400)

        # Supprimer le template
        template.delete()

        return JsonResponse({
            'success': True,
            'message': f'Template "{nom_template}" supprim√© avec succ√®s',
            'nom': nom_template
        })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la suppression: {str(e)}'
        }, status=500)


@superviseur_required
def etiquette_list(request):
    """Liste des √©tiquettes avec filtres et pagination intelligente"""
    # R√©cup√©rer les param√®tres de filtrage
    search = request.GET.get('search', '')
    statut = request.GET.get('statut', '')
    template_id = request.GET.get('template', '')
    
    # Construire la requ√™te de base
    etiquettes = Etiquette.objects.select_related('template', 'cree_par').order_by('-date_creation')
    
    # Appliquer les filtres
    if search:
        etiquettes = etiquettes.filter(
            Q(reference__icontains=search) | 
            Q(template__nom__icontains=search) |
            Q(commande_id__icontains=search) |
            Q(nom_article__icontains=search) |
            Q(client_nom__icontains=search)
        )
    
    if statut:
        etiquettes = etiquettes.filter(statut=statut)
    
    if template_id:
        etiquettes = etiquettes.filter(template_id=template_id)
    
    # Pour la pagination intelligente, on passe toutes les √©tiquettes
    # La pagination sera g√©r√©e c√¥t√© client
    etiquettes_list = list(etiquettes)
    
    # Pagination Django (fallback)
    paginator = Paginator(etiquettes, 20)  # 20 √©tiquettes par page
    page_number = request.GET.get('page')
    etiquettes_page = paginator.get_page(page_number)
    
    # Statistiques
    total_count = Etiquette.objects.count()
    draft_count = Etiquette.objects.filter(statut='draft').count()
    ready_count = Etiquette.objects.filter(statut='ready').count()
    printed_count = Etiquette.objects.filter(statut='printed').count()
    
    # Templates pour le filtre
    templates = EtiquetteTemplate.objects.filter(actif=True).order_by('nom')
    
    context = {
        'etiquettes': etiquettes_list,  # Toutes les √©tiquettes pour la pagination intelligente
        'etiquettes_page': etiquettes_page,  # Page Django (fallback)
        'templates': templates,
        'total_count': total_count,
        'draft_count': draft_count,
        'ready_count': ready_count,
        'printed_count': printed_count,
        'search_query': search,
        'statut_filter': statut,
        'template_filter': template_id,
    }
    
    return render(request, 'etiquettes_pro/etiquette_list.html', context)


@superviseur_required
def preview_etiquette(request, etiquette_id):
    """Aper√ßu d'une √©tiquette"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîç [PREVIEW] D√©but aper√ßu √©tiquette ID: {etiquette_id}")
    
    etiquette = get_object_or_404(Etiquette, id=etiquette_id)
    logger.info(f"üîç [PREVIEW] √âtiquette trouv√©e - Reference: {etiquette.reference}")
    logger.info(f"üîç [PREVIEW] Template: {etiquette.template.nom} (code_type: {etiquette.template.code_type})")
    logger.info(f"üîç [PREVIEW] Code_data: '{etiquette.code_data}'")
    logger.info(f"üîç [PREVIEW] Commande_id: '{etiquette.commande_id}'")
    
    commande = None
    if etiquette.commande_id:
        try:
            commande = Commande.objects.get(id=int(etiquette.commande_id))
            logger.info(f"‚úÖ [PREVIEW] Commande trouv√©e - ID: {commande.id}, Num: {commande.num_cmd}")
            logger.info(f"‚úÖ [PREVIEW] Client: {commande.client.nom} {commande.client.prenom}")
            logger.info(f"‚úÖ [PREVIEW] Total: {commande.total_cmd}")
        except (Commande.DoesNotExist, ValueError) as e:
            logger.warning(f"‚ö†Ô∏è [PREVIEW] Commande non trouv√©e: {e}")
            pass
    else:
        logger.warning(f"‚ö†Ô∏è [PREVIEW] Pas de commande_id dans l'√©tiquette")
    
    # Calculer le total d'articles pour l'affichage
    total_articles = 0
    if etiquette.cart_items:
        total_articles = sum(item.get('quantite', 0) for item in etiquette.cart_items)
            
    context = {
        'etiquette': etiquette,
        'commande': commande,
        'total_articles': total_articles,
    }
    
    logger.info(f"‚úÖ [PREVIEW] Contexte pr√©par√©, rendu du template")
    return render(request, 'etiquettes_pro/etiquette_preview.html', context)


def api_template_list(request):
    """API pour lister les templates"""
    templates = EtiquetteTemplate.objects.filter(actif=True)
    data = [{'id': t.id, 'nom': t.nom, 'type': t.type_etiquette} for t in templates]
    return JsonResponse({'templates': data})


def api_etiquette_list(request):
    """API pour lister les √©tiquettes"""
    # V√©rifier si un filtre par commande_id est demand√©
    commande_id = request.GET.get('commande_id')
    
    if commande_id:
        # Filtrer par commande_id
        etiquettes = Etiquette.objects.filter(commande_id=str(commande_id))
        print(f"üîç [DEBUG API] Recherche √©tiquettes pour commande_id: {commande_id}, trouv√©es: {etiquettes.count()}")
    else:
        # R√©cup√©rer toutes les √©tiquettes (limit√©es √† 50)
        etiquettes = Etiquette.objects.all()[:50]
    
    data = [{'id': e.id, 'reference': e.reference, 'statut': e.statut, 'commande_id': e.commande_id} for e in etiquettes]
    return JsonResponse(data, safe=False)




@superviseur_required
def get_commandes_with_paniers(request):
    """R√©cup√©rer les commandes confirm√©es avec paniers qui n'ont pas encore d'√©tiquettes"""
    try:
        # R√©cup√©rer le template par d√©faut
        template = EtiquetteTemplate.objects.filter(
            nom='Template Livraison Standard',
            actif=True
        ).first()
        
        print(f"üîç [DEBUG] Template trouv√©: {template}")
        
        if not template:
            # Essayer de r√©cup√©rer n'importe quel template actif
            template = EtiquetteTemplate.objects.filter(actif=True).first()
            print(f"üîç [DEBUG] Template par d√©faut non trouv√©, utilisation du premier template actif: {template}")
        
        if not template:
            return JsonResponse({'error': 'Aucun template actif trouv√©'}, status=404)
        
        # R√©cup√©rer uniquement les commandes confirm√©es avec paniers
        commandes_avec_paniers = Commande.objects.filter(
            paniers__isnull=False,
            etats__enum_etat__libelle='Confirm√©e',  # SANS espace √† la fin
            etats__date_fin__isnull=True  # √âtat actuel (non termin√©)
        ).select_related('client', 'ville').distinct()
        
        print(f"üîç [DEBUG] Commandes confirm√©es avec paniers trouv√©es: {commandes_avec_paniers.count()}")
        
        # R√©cup√©rer les IDs des commandes qui ont d√©j√† des √©tiquettes (avec n'importe quel template)
        commandes_avec_etiquettes = set(
            Etiquette.objects.filter(
                commande_id__isnull=False
            ).values_list('commande_id', flat=True)
        )
        
        print(f"üîç [DEBUG] Commandes avec √©tiquettes: {len(commandes_avec_etiquettes)}")
        print(f"üîç [DEBUG] IDs des commandes avec √©tiquettes: {list(commandes_avec_etiquettes)[:10]}...")  # Afficher les 10 premiers
        
        # Filtrer les commandes sans √©tiquettes
        commandes_sans_etiquettes = []
        for commande in commandes_avec_paniers:
            if str(commande.id) not in commandes_avec_etiquettes:
                # Calculer le nombre total d'articles
                total_articles = sum(panier.quantite for panier in commande.paniers.all())
                
                commandes_sans_etiquettes.append({
                    'id': commande.id,
                    'num_cmd': commande.num_cmd or commande.id_yz,
                    'client_nom': f"{commande.client.nom} {commande.client.prenom}" if commande.client else "Client inconnu",
                    'client_telephone': commande.client.numero_tel if commande.client else "",
                    'ville_init': commande.ville_init or "",
                    'ville_livraison': commande.ville.nom if commande.ville else "",
                    'total_articles': total_articles,
                    'date_creation': commande.date_creation.strftime('%d/%m/%Y %H:%M') if commande.date_creation else "",
                    'paniers_count': commande.paniers.count()
                })
        
        print(f"üîç [DEBUG] Commandes sans √©tiquettes trouv√©es: {len(commandes_sans_etiquettes)}")
        if commandes_sans_etiquettes:
            print(f"üîç [DEBUG] Premi√®re commande sans √©tiquette: {commandes_sans_etiquettes[0]}")
        
        return JsonResponse({
            'commandes': commandes_sans_etiquettes,
            'total': len(commandes_sans_etiquettes)
        })
        
    except Exception as e:
        return JsonResponse({'error': f'Erreur: {str(e)}'}, status=500)


@superviseur_required
def generate_etiquettes_manually(request):
    """G√©n√©rer manuellement des √©tiquettes pour les commandes confirm√©es avec paniers"""
    try:
        if request.method != 'POST':
            return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)
        
        # R√©cup√©rer le template par d√©faut
        template = EtiquetteTemplate.objects.filter(
            nom='Template Livraison Standard',
            actif=True
        ).first()
        
        if not template:
            return JsonResponse({'error': 'Template par d√©faut non trouv√©'}, status=404)
        
        # V√©rifier si une commande sp√©cifique est demand√©e
        import json
        commande_id = None
        try:
            if request.body:
                body = json.loads(request.body)
                commande_id = body.get('commande_id')
        except (json.JSONDecodeError, AttributeError):
            pass
        
        commandes_avec_paniers = Commande.objects.none() # Initialiser √† vide
        commandes_avec_etiquettes = set()

        if commande_id:
            # G√©n√©rer pour une seule commande (doit √™tre confirm√©e)
            print(f"üîç [DEBUG] G√©n√©ration individuelle pour la commande {commande_id}")
            commandes_avec_paniers = Commande.objects.filter(
                id=commande_id,
                paniers__isnull=False,
                etats__enum_etat__libelle='Confirm√©e',  # SANS espace √† la fin
                etats__date_fin__isnull=True  # √âtat actuel (non termin√©)
            ).select_related('client', 'ville')
            
            print(f"üîç [DEBUG] Commande {commande_id} trouv√©e: {commandes_avec_paniers.exists()}")
            
            if not commandes_avec_paniers.exists():
                return JsonResponse({'error': f'Commande {commande_id} non trouv√©e, sans paniers ou non confirm√©e'}, status=404)

            # Si commande_id est pr√©sent (g√©n√©ration individuelle), supprimer l'√©tiquette existante si elle existe (avec n'importe quel template)
            etiquettes_supprimees = Etiquette.objects.filter(
                commande_id=str(commande_id)
            ).count()
            Etiquette.objects.filter(
                commande_id=str(commande_id)
            ).delete()
            print(f"üîç [DEBUG] √âtiquettes supprim√©es pour la commande {commande_id}: {etiquettes_supprimees}")

            # Pour la g√©n√©ration individuelle, nous ne voulons pas sauter la cr√©ation, donc l'ensemble est vide
            # commandes_avec_etiquettes reste vide ici pour forcer la cr√©ation de l'√©tiquette individuelle

        else:
            # G√©n√©rer pour toutes les commandes confirm√©es
            commandes_avec_paniers = Commande.objects.filter(
                paniers__isnull=False,
                etats__enum_etat__libelle='Confirm√©e',  # SANS espace √† la fin
                etats__date_fin__isnull=True  # √âtat actuel (non termin√©)
            ).select_related('client', 'ville').distinct()

            # R√©cup√©rer les IDs des commandes qui ont d√©j√† des √©tiquettes (pour la g√©n√©ration en lot, avec n'importe quel template)
            commandes_avec_etiquettes = set(
                Etiquette.objects.filter(
                    commande_id__isnull=False
                ).values_list('commande_id', flat=True)
            )
        
        # G√©n√©rer les √©tiquettes
        etiquettes_creees = []
        for commande in commandes_avec_paniers:
            # Pour la g√©n√©ration individuelle, on ne v√©rifie pas les √©tiquettes existantes car on les a d√©j√† supprim√©es
            # Pour la g√©n√©ration en lot, on v√©rifie si la commande a d√©j√† une √©tiquette
            if not commande_id and str(commande.id) in commandes_avec_etiquettes:
                continue
            
            # R√©cup√©rer les vrais articles de la commande depuis le mod√®le Panier
            cart_items_data = []
            for panier in commande.paniers.all():
                # Construire le nom de la variante
                variante_nom = "Standard"
                if panier.variante:
                    couleur = panier.variante.couleur.nom if panier.variante.couleur else ""
                    pointure = panier.variante.pointure.pointure if panier.variante.pointure else ""
                    if couleur and pointure:
                        variante_nom = f"{couleur} {pointure}"
                    elif couleur:
                        variante_nom = couleur
                    elif pointure:
                        variante_nom = pointure
                
                item_data = {
                    "nom": panier.article.nom,
                    "reference": panier.article.reference or "",
                    "variante": variante_nom,
                    "quantite": panier.quantite,
                    "prix_unitaire": float(panier.sous_total / panier.quantite) if panier.quantite > 0 else 0,
                    "sous_total": float(panier.sous_total)
                }
                cart_items_data.append(item_data)
            
            # Cr√©er l'√©tiquette
            print(f"üîç [DEBUG] Cr√©ation de l'√©tiquette pour la commande {commande.id}")
            etiquette = Etiquette.objects.create(
                template=template,
                reference=f"{commande.id:06d}",
                nom_article=f"Commande {commande.num_cmd or commande.id_yz}",
                commande_id=str(commande.id),
                client_nom=f"{commande.client.nom} {commande.client.prenom}" if commande.client else "",
                code_data=f"{commande.id:06d}",
                statut='ready',
                cree_par=request.user,
                cart_items=cart_items_data
            )
            print(f"üîç [DEBUG] √âtiquette cr√©√©e: ID {etiquette.id}, R√©f√©rence {etiquette.reference}, Template {etiquette.template.nom}")
            etiquettes_creees.append(etiquette)
            
            # Pour la g√©n√©ration individuelle, on s'arr√™te apr√®s avoir cr√©√© une √©tiquette
            if commande_id:
                print(f"üîç [DEBUG] G√©n√©ration individuelle termin√©e pour la commande {commande_id}")
                break
        
        return JsonResponse({
            'success': True,
            'etiquettes_creees': len(etiquettes_creees),
            'message': f'{len(etiquettes_creees)} √©tiquettes g√©n√©r√©es avec succ√®s'
        })
        
    except Exception as e:
        return JsonResponse({'error': f'Erreur lors de la g√©n√©ration: {str(e)}'}, status=500)


@login_required
def etiquette_print_data(request, etiquette_id):
    """R√©cup√©rer les donn√©es d'une √©tiquette pour l'impression avec le template configur√©"""
    import logging
    logger = logging.getLogger(__name__)
    
    try:
        etiquette = get_object_or_404(Etiquette, id=etiquette_id)
        template = etiquette.template
        
        # R√©cup√©rer les donn√©es de la commande
        commande = None
        if etiquette.commande_id:
            try:
                commande = Commande.objects.get(id=int(etiquette.commande_id))
            except (Commande.DoesNotExist, ValueError):
                pass
        
        # Calculer le total d'articles
        total_articles = 0
        if etiquette.cart_items:
            total_articles = sum(item.get('quantite', 0) for item in etiquette.cart_items)
        
        # Pr√©parer les donn√©es pour l'impression
        data = {
            'success': True,
            'etiquette': {
                'id': etiquette.id,
                'reference': etiquette.reference,
                'code_data': etiquette.code_data,
                'nom_article': etiquette.nom_article,
                'client_nom': etiquette.client_nom,
                'cart_items': etiquette.cart_items or [],
            },
            'template': {
                # Informations de base
                'nom': template.nom,
                'description': template.description,
                'type_etiquette': template.type_etiquette,
                'format_page': template.format_page,
                
                # Dimensions
                'largeur': template.largeur,
                'hauteur': template.hauteur,
                
                # Param√®tres du code-barres/QR
                'code_type': template.code_type,
                'code_size': template.code_size,
                'code_position': template.code_position,
                'code_width': template.code_width,
                'code_height': template.code_height,
                'code_quality': template.code_quality,
                
                # Param√®tres de bordures
                'border_enabled': template.border_enabled,
                'border_width': template.border_width,
                'border_color': template.border_color,
                'border_radius': template.border_radius,
                
                # Param√®tres de design
                'police_titre': template.police_titre,
                'taille_titre': template.taille_titre,
                'police_texte': template.police_texte,
                'taille_texte': template.taille_texte,
                
                # Couleurs
                'couleur_principale': template.couleur_principale,
                'couleur_secondaire': template.couleur_secondaire,
                'couleur_texte': template.couleur_texte,
                
                # Ic√¥nes professionnelles
                'icone_client': template.icone_client,
                'icone_telephone': template.icone_telephone,
                'icone_adresse': template.icone_adresse,
                'icone_ville': template.icone_ville,
                'icone_article': template.icone_article,
                'icone_prix': template.icone_prix,
                'icone_marque': template.icone_marque,
                'icone_website': template.icone_website,
                'icone_panier': template.icone_panier,
                'icone_code': template.icone_code,
                'icone_date': template.icone_date,
                
                # Param√®tres de personnalisation d'impression
                'print_code_width': template.print_code_width,
                'print_code_height': template.print_code_height,
                'print_contact_width': template.print_contact_width,
                'print_show_prices': template.print_show_prices,
                'print_show_articles': template.print_show_articles,
                'print_show_client_info': template.print_show_client_info,
                'print_show_contact_info': template.print_show_contact_info,
                'print_show_brand': template.print_show_brand,
                'print_show_date': template.print_show_date,
                'print_show_total_circle': template.print_show_total_circle,
                'print_margin_top': template.print_margin_top,
                'print_margin_bottom': template.print_margin_bottom,
                'print_margin_left': template.print_margin_left,
                'print_margin_right': template.print_margin_right,
                'print_padding': template.print_padding,
                'print_font_size_title': template.print_font_size_title,
                'print_font_size_text': template.print_font_size_text,
                'print_font_size_small': template.print_font_size_small,
                
                # M√©tadonn√©es
                'actif': template.actif,
                'date_creation': template.date_creation.isoformat() if template.date_creation else None,
                'date_modification': template.date_modification.isoformat() if template.date_modification else None,
            },
            'commande': {
                'id': commande.id if commande else None,
                'num_cmd': commande.num_cmd if commande else None,
                'total_cmd': commande.total_cmd if commande else None,
                'ville_init': commande.ville_init if commande else None,
                'client': {
                    'nom': commande.client.nom if commande and commande.client else None,
                    'prenom': commande.client.prenom if commande and commande.client else None,
                    'numero_tel': commande.client.numero_tel if commande and commande.client else None,
                    'adresse': commande.client.adresse if commande and commande.client else None,
                } if commande and commande.client else None,
                'ville': {
                    'nom': commande.ville.nom if commande and commande.ville else None,
                } if commande and commande.ville else None,
            } if commande else None,
            'total_articles': total_articles,
        }
        
        return JsonResponse(data)
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des donn√©es d'impression: {e}")
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la r√©cup√©ration des donn√©es: {str(e)}'
        }, status=500)


def update_template_print_settings(request, template_id):
    """Mettre √† jour les param√®tres de personnalisation d'impression d'un template"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'M√©thode non autoris√©e'})
    
    try:
        template = EtiquetteTemplate.objects.get(id=template_id)
    except EtiquetteTemplate.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'Template non trouv√©'})
    
    try:
        # Mettre √† jour les param√®tres de personnalisation d'impression
        template.print_code_width = int(request.POST.get('print_code_width', 250))
        template.print_code_height = int(request.POST.get('print_code_height', 80))
        template.print_contact_width = int(request.POST.get('print_contact_width', 250))
        template.print_show_prices = request.POST.get('print_show_prices') == 'on'
        template.print_show_articles = request.POST.get('print_show_articles') == 'on'
        template.print_show_client_info = request.POST.get('print_show_client_info') == 'on'
        template.print_show_contact_info = request.POST.get('print_show_contact_info') == 'on'
        template.print_show_brand = request.POST.get('print_show_brand') == 'on'
        template.print_show_date = request.POST.get('print_show_date') == 'on'
        template.print_show_total_circle = request.POST.get('print_show_total_circle') == 'on'
        template.print_padding = int(request.POST.get('print_padding', 15))
        template.print_font_size_title = int(request.POST.get('print_font_size_title', 16))
        template.print_font_size_text = int(request.POST.get('print_font_size_text', 12))
        template.print_font_size_small = int(request.POST.get('print_font_size_small', 10))
        
        template.save()
        
        return JsonResponse({
            'success': True,
            'message': 'Param√®tres d\'impression mis √† jour avec succ√®s'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la mise √† jour: {str(e)}'
        })



@superviseur_required
@require_http_methods(["DELETE"])
def delete_etiquette(request, etiquette_id):
    """Supprimer une √©tiquette"""
    try:
        etiquette = get_object_or_404(Etiquette, id=etiquette_id)
        reference = etiquette.reference
        
        # Supprimer l'√©tiquette
        etiquette.delete()
        
        return JsonResponse({
            'success': True,
            'message': f'√âtiquette {reference} supprim√©e avec succ√®s',
            'reference': reference
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de la suppression: {str(e)}'
        })