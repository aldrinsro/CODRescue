{% extends 'composant_generale/operatConfirme/base.html' %}
{% load static %}

{% block title %}Créer Commande - YZ-CMD{% endblock %}

{% block content %}
<div class="main-content transition-all duration-300">
    <!-- En-tête de la page -->
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 text-white p-6 rounded-xl shadow-lg" style="background: linear-gradient(to right, var(--confirmation-primary), var(--confirmation-light));">
        <div>
            <h1 class="text-3xl font-bold flex items-center mb-2">
                <i class="fas fa-plus-circle mr-3" style="color: var(--confirmation-border-accent);"></i>
                Nouvelle Commande
            </h1>
            <p style="color: var(--confirmation-border-accent);">Enregistrez une nouvelle commande dans le système.</p>
        </div>
        <a href="{% url 'operatConfirme:liste_commandes' %}" class="mt-4 md:mt-0 inline-flex items-center text-white px-4 py-2 rounded-lg font-medium transition-all shadow-md hover:shadow-lg" style="background-color: var(--confirmation-primary); hover:background-color: var(--confirmation-light);">
            <i class="fas fa-arrow-left mr-2"></i>Retour à la liste
        </a>
    </div>

    <div class="bg-white rounded-xl shadow-lg border p-6 md:p-8 mb-8" style="border-color: var(--confirmation-border-accent);">
        <form method="post" id="commandeForm">
            {% csrf_token %}

            <!-- Section Client -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold mb-4 flex items-center" style="color: var(--confirmation-primary);">
                    <i class="fas fa-user mr-2"></i>
                    Informations Client
                </h3>
                
                <!-- Type de client -->
                <div class="mb-6">
                    <label class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Type de client</label>
                    <div class="flex space-x-4">
                        <label class="flex items-center">
                            <input type="radio" name="type_client" value="existant" checked 
                                   class="form-radio" style="color: var(--confirmation-primary);">
                            <span class="ml-2">Client existant</span>
                        </label>
                        <label class="flex items-center">
                            <input type="radio" name="type_client" value="nouveau" 
                                   class="form-radio" style="color: var(--confirmation-primary);">
                            <span class="ml-2">Nouveau client</span>
                        </label>
                    </div>
                </div>

                <!-- Section client existant -->
                <div id="section-client-existant" class="mb-6">
                    <!-- Recherche par numéro de téléphone -->
                    <div class="mb-4">
                        <label for="recherche_telephone" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Rechercher par numéro de téléphone</label>
                        <div class="flex gap-2">
                            <input type="tel" id="recherche_telephone" placeholder="Ex: 06XXXXXXXX" 
                                   class="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200">
                            <button type="button" id="btn_rechercher_client" class="px-4 py-3 text-white rounded-lg font-medium transition-all shadow-md" style="background-color: var(--confirmation-primary);">
                                <i class="fas fa-search mr-2"></i>Rechercher
                            </button>
                        </div>
                        <div id="resultat_recherche" class="mt-2 hidden">
                            <!-- Les résultats de recherche apparaîtront ici -->
                        </div>
                </div>

                    <!-- Sélection manuelle -->
                        <div>
                        <label for="client" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Ou sélectionner manuellement</label>
                            <select name="client" id="client" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200">
                                <option value="">Sélectionner un client</option>
                                {% for client in clients %}
                                <option value="{{ client.pk }}">{{ client.get_full_name }} ({{ client.numero_tel }})</option>
                        {% endfor %}
                    </select>
                    </div>
                </div>

                <!-- Section nouveau client -->
                <div id="section-nouveau-client" class="grid grid-cols-2 gap-4" style="display: none;">
                        <div>
                        <label for="nouveau_prenom" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Prénom</label>
                        <input type="text" id="nouveau_prenom" name="nouveau_prenom" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200">
                        </div>
                        <div>
                        <label for="nouveau_nom" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Nom</label>
                        <input type="text" id="nouveau_nom" name="nouveau_nom" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200">
                        </div>
                        <div>
                        <label for="nouveau_telephone" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Téléphone</label>
                        <input type="tel" id="nouveau_telephone" name="nouveau_telephone" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200">
                        </div>
                        <div>
                        <label for="nouveau_email" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Email (Optionnel)</label>
                        <input type="email" id="nouveau_email" name="nouveau_email" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200">
                    </div>
                </div>
            </div>

            <!-- Section Livraison -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold mb-4 flex items-center" style="color: var(--confirmation-primary);">
                    <i class="fas fa-truck mr-2"></i>
                    Informations de Livraison
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="ville_livraison" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Ville de livraison</label>
                        <select name="ville_livraison" id="ville_livraison" onchange="chargerRegionEtFrais()" required class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200">
                            <option value="">Sélectionner une ville...</option>
                            {% for ville in villes %}
                                <option value="{{ ville.pk }}" 
                                        data-frais="{{ ville.frais_livraison|stringformat:'.2f' }}"
                                        data-region="{{ ville.region.nom_region|default:'' }}"
                                        data-delai-min="{{ ville.Delai_livraison_min|default:0 }}"
                                        data-delai-max="{{ ville.Delai_livraison_max|default:0 }}">
                                    {{ ville.nom }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div>
                        <label for="frais_livraison" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Frais de livraison (DH)</label>
                        <input type="text" id="frais_livraison" name="frais_livraison" class="w-full p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed" readonly>
                    </div>
                    <div>
                        <label for="region_livraison" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Livreur (Automatique)</label>
                        <input type="text" id="region_livraison" name="region_livraison" class="w-full p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed" readonly>
                    </div>
                     <div>
                        <label for="delai_livraison" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Délai de livraison (Automatique)</label>
                        <input type="text" id="delai_livraison" name="delai_livraison" class="w-full p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed" readonly>
                    </div>
                     <div>
                        <label for="adresse" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Adresse complète</label>
                        <textarea name="adresse" id="adresse" rows="3" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--confirmation-border-accent)] focus:border-transparent transition duration-200" required></textarea>
                    </div>
                </div>
            </div>

            <!-- Section Articles -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold mb-4 flex items-center" style="color: var(--confirmation-primary);">
                    <i class="fas fa-shopping-cart mr-2"></i>
                    Articles
                    <span class="ml-2 text-sm font-normal text-gray-500">(Optionnel)</span>
                </h3>
                
                <!-- Message informatif -->
                <div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <div class="flex items-start">
                        <i class="fas fa-info-circle text-blue-500 mt-0.5 mr-2"></i>
                        <div class="text-sm text-blue-700">
                            <p class="font-medium">Les articles sont optionnels</p>
                            <p>Vous pouvez créer une commande sans articles et les ajouter plus tard via la modification.</p>
                        </div>
                    </div>
                </div>
                
                <!-- Container pour les articles ajoutés -->
                <div id="articles-container" class="space-y-4 mb-6">
                    <!-- Les articles seront ajoutés ici par JavaScript -->
                </div>

                <!-- Bouton pour ouvrir le modal directement -->
                <button type="button" id="btn-ouvrir-modal" onclick="ouvrirModalAjouterArticle()" class="mt-4 inline-flex items-center px-4 py-2 text-white rounded-lg font-medium transition-all shadow-md" style="background-color: var(--confirmation-primary);">
                    <i class="fas fa-plus mr-2"></i>
                    Ajouter un article
                            </button>
            </div>

            <!-- Options et Total -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6 mb-6 pt-4 border-t" style="border-color: var(--confirmation-border-accent);">
             
                    <div>
                    <label for="total_cmd" class="block text-sm font-medium mb-2" style="color: var(--confirmation-primary);">Total Commande (DH)</label>
                    <input type="number" name="total_cmd" id="total_cmd" step="0.01" min="0" class="w-full p-3 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed" readonly required>
                </div>
            </div>

            <!-- Bouton de soumission -->
            <div class="flex items-center justify-between">
                <div class="text-sm text-gray-600">
                    <i class="fas fa-info-circle mr-1"></i>
                    Vous pouvez créer la commande avec ou sans articles
                </div>
            <button type="submit" class="px-6 py-3 text-white rounded-lg font-medium transition-all shadow-md" style="background-color: var(--confirmation-primary); hover:background-color: var(--confirmation-light);">
                <i class="fas fa-save mr-2"></i>
                Créer la commande
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Modal réutilisable pour ajouter des articles -->
{% include 'composant_generale/modal_ajout_articles.html' %}

<!-- Script JSON pour les articles disponibles -->
{{ articles_json|json_script:"articles-data" }}

<!-- Inclusion du JavaScript du modal réutilisable -->
<script src="{% static 'js/modal_ajout_articles.js' %}"></script>

<script>
console.log('🚀 Script de la page de création chargé');
console.log('🔧 Fonction ouvrirModalAjouterArticle disponible:', typeof ouvrirModalAjouterArticle);

// Fonction pour charger automatiquement la région, les frais et les délais
function chargerRegionEtFrais() {
    const villeSelect = document.getElementById('ville_livraison');
    const selectedOption = villeSelect.options[villeSelect.selectedIndex];
    
    if (selectedOption.value) {
        const region = selectedOption.getAttribute('data-region');
        const frais = selectedOption.getAttribute('data-frais');
        const delaiMin = selectedOption.getAttribute('data-delai-min');
        const delaiMax = selectedOption.getAttribute('data-delai-max');
        
        // Formater les frais avec 2 décimales
        const fraisFormates = parseFloat(frais || 0).toLocaleString('fr-FR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
        
        document.getElementById('frais_livraison').value = fraisFormates;
        document.getElementById('region_livraison').value = region || '';
        document.getElementById('delai_livraison').value = `${delaiMin} - ${delaiMax} jours`;
        
        // Recalculer le total avec les nouveaux frais de livraison
        if (typeof calculerTotal === 'function') {
            calculerTotal();

        console.log(`🏙️ Ville changée: ${selectedOption.text}, Frais: ${fraisFormates} DH, Livreur: ${region}, Délai: ${delaiMin}-${delaiMax} jours`);
    } else {
        // Réinitialiser les champs si aucune ville n'est sélectionnée
        document.getElementById('frais_livraison').value = '';
        document.getElementById('region_livraison').value = '';
        document.getElementById('delai_livraison').value = '';
        
        // Recalculer le total sans frais de livraison
        if (typeof calculerTotal === 'function') {
            calculerTotal();

// Variables globales pour la gestion des articles (maintenant dans modal_ajout_articles.js)

                // Réinitialiser la sélection
    ligneSelectionnee = null;
    const btnAjouter = document.getElementById('btn-ajouter-article');
    if (btnAjouter) {
        btnAjouter.disabled = true;

 else {
                console.warn('⚠️ Les données ne sont pas un tableau:', typeof parsedData);
                articlesDisponibles = [];

        } catch (e) {
            console.error('❌ Erreur lors du parsing des articles:', e);
            articlesDisponibles = [];

        } else {
        console.warn('⚠️ Script articles-data non trouvé ou vide');
            articlesDisponibles = [];

    // Vérifier que articlesDisponibles est bien un tableau avant de continuer
    if (!Array.isArray(articlesDisponibles)) {
        console.error('❌ articlesDisponibles n\'est pas un tableau:', typeof articlesDisponibles);
        articlesDisponibles = [];

    // Remplir le tableau
    try {
        remplirTableauArticles();
    } catch (error) {
        console.error('❌ Erreur lors du remplissage du tableau:', error);

    // Mettre à jour les compteurs
    try {
        mettreAJourCompteurs();
            } catch (error) {
        console.error('❌ Erreur lors de la mise à jour des compteurs:', error);

// Fonction pour remplir le tableau des articles
function remplirTableauArticles() {
    const tbody = document.getElementById('articlesTableBody');
    if (!tbody) {
        console.error('❌ Élément articlesTableBody non trouvé');
        return;

    tbody.innerHTML = '';
    
    // Vérifier que articlesDisponibles est bien un tableau
    if (!Array.isArray(articlesDisponibles)) {
        console.error('❌ articlesDisponibles n\'est pas un tableau dans remplirTableauArticles:', typeof articlesDisponibles);
        tbody.innerHTML = '<tr><td colspan="4" class="text-center text-gray-500 py-4">Erreur: données d\'articles invalides</td></tr>';
        return;

    // Si aucun article n'est disponible
    if (articlesDisponibles.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" class="text-center text-gray-500 py-4">Aucun article disponible</td></tr>';
        return;

    articlesDisponibles.forEach(article => {
                const tr = document.createElement('tr');
        tr.className = 'hover:bg-gray-50 transition-colors cursor-pointer';
                tr.dataset.article = JSON.stringify(article);

        // Générer les badges basés sur les vraies propriétés de la base de données
        let badges = '';
        if (article.has_promo_active) badges += '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 mr-1">🔥 PROMO</span>';
        if (article.phase === 'LIQUIDATION') badges += '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 mr-1">🏷️ LIQUIDATION</span>';
        if (article.phase === 'EN_TEST') badges += '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mr-1">🧪 TEST</span>';
        if (article.isUpsell) badges += '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 mr-1">⬆️ UPSELL</span>';

                tr.innerHTML = `
            <td class="px-2 py-2 text-xs sm:text-sm">
                <div class="flex items-start space-x-2">
                            <!-- Image de l'article -->
                            <div class="flex-shrink-0">
                        <div class="w-10 h-10 sm:w-12 sm:h-12 rounded-lg overflow-hidden bg-gray-100 border border-gray-200 shadow-sm">
                                    ${article.image_url ? 
                                `<img src="${article.image_url}" alt="Image de ${article.nom}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" onload="this.nextElementSibling.style.display='none';">` : 
                                        ''

                                    <div class="w-full h-full flex items-center justify-center text-gray-400 ${article.image_url ? 'hidden' : ''}">
                                <i class="fas fa-image text-sm"></i>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Informations de l'article -->
                            <div class="flex-1 min-w-0">
                        <div class="font-medium text-gray-900 text-xs sm:text-sm truncate">${article.nom}</div>
                        <div class="text-gray-500 text-xs truncate">${article.reference}</div>
                <div class="mt-1">${badges}</div>
                        <div class="text-xs text-gray-500 mt-1 truncate">
                    ${article.couleur ? `Couleur: ${article.couleur}` : ''} 
                    ${article.pointure ? ` | Taille: ${article.pointure}` : ''}
                                </div>
                            </div>
                        </div>
                    </td>
            <td class="px-1 py-2 text-center">
                <span class="font-bold text-green-600 text-xs sm:text-sm">${article.prix_unitaire} DH</span>
            </td>
            <td class="px-1 py-2 text-center">
                <span class="px-1 py-0.5 rounded-full text-xs font-medium ${article.qte_disponible <= 0 ? 'bg-red-100 text-red-700' : (article.qte_disponible < 5 ? 'bg-orange-100 text-orange-700' : 'bg-teal-100 text-teal-700')}">
                    ${article.qte_disponible <= 0 ? 'Épuisé' : article.qte_disponible + ' unités'}
                        </span>
                    </td>
            <td class="px-1 py-2 text-center">
                <button type="button" class="px-2 py-1 bg-gray-800 hover:bg-gray-900 text-white rounded text-xs" onclick="ajouterDepuisLigne(this)">
                            <i class="fas fa-plus mr-1"></i>Ajouter
                        </button>
                    </td>`;
        
        // L'event listener est déjà géré par l'attribut onclick du bouton
        
        tbody.appendChild(tr);
    });

// Fonction pour ajouter un article depuis une ligne (modifiée pour ouvrir directement le modal des variantes)
function ajouterDepuisLigne(button) {
    const row = button.closest('tr');
    const article = JSON.parse(row.dataset.article);
    const quantite = 1; // Quantité par défaut
    
    console.log('➕ Ouverture modal variantes pour article:', {
        article: article.nom,
        quantite: quantite,
        prix: article.prix_unitaire
    });
    
    // Ouvrir directement le modal de sélection des variantes
    ouvrirModalVariantes(article, quantite);

// Fonction pour calculer le total
    function calculerTotal() {
        const articles = document.querySelectorAll('#articles-container .bg-white');
        let totalArticles = 0;
        
        articles.forEach(articleCard => {
            const sousTotalElement = articleCard.querySelector('.text-lg.font-bold');
            if (sousTotalElement) {
                const sousTotalText = sousTotalElement.textContent.replace(' DH', '');
                totalArticles += parseFloat(sousTotalText) || 0;

        });
        
        // Récupérer les frais de livraison
        const fraisLivraisonText = document.getElementById('frais_livraison').value;
        const fraisLivraison = parseFloat(fraisLivraisonText.replace(/[^\d,.-]/g, '').replace(',', '.')) || 0;
        
        // Calculer le total final (articles + frais de livraison)
        const totalFinal = totalArticles + fraisLivraison;
        
        document.getElementById('total_cmd').value = totalFinal.toFixed(2);
        
        console.log('📊 Calcul du total:', {
            totalArticles: totalArticles.toFixed(2),
            fraisLivraison: fraisLivraison.toFixed(2),
            totalFinal: totalFinal.toFixed(2)
        });

');
            const searchFields = [
                article.nom || '',
                article.reference || '',
                article.couleur || '',
                article.pointure || ''
            ];
            
            const cible = searchFields
                .filter(field => field && typeof field === 'string')
                .join(' ')
                .toLowerCase();
            
            const shouldShow = !value || (cible && cible.indexOf && cible.indexOf(value) !== -1);
            row.style.display = shouldShow ? '' : 'none';
        } catch (e) {
            row.style.display = '';

    });

// ================== SYSTÈME DE GESTION DES VARIANTES ==================
// Les variables et fonctions sont maintenant dans modal_ajout_articles.js

<script>
/**
 * Gestion de l'affichage des sections selon le type de client
 * Affiche/masque les sections client existant vs nouveau client
 */
document.addEventListener('DOMContentLoaded', function() {
    const typeClientRadios = document.querySelectorAll('input[name="type_client"]');
    
    if (typeClientRadios.length === 0) {
        console.warn('⚠️ Aucun radio button type_client trouvé');
        return;

    typeClientRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            const clientExistantSection = document.getElementById('section-client-existant');
            const nouveauClientSection = document.getElementById('section-nouveau-client');
            
            // Vérifier que les sections existent
            if (!clientExistantSection || !nouveauClientSection) {
                console.error('❌ Sections client non trouvées');
                return;

            if (this.value === 'existant') {
                // Afficher section client existant, masquer nouveau client
                clientExistantSection.style.display = 'block';
                nouveauClientSection.style.display = 'none';
                
                // Réinitialiser les champs du nouveau client
                const nouveauClientFields = [
                    'nouveau_prenom',
                    'nouveau_nom', 
                    'nouveau_telephone',
                    'nouveau_email'
                ];
                
                nouveauClientFields.forEach(fieldId => {
                    const field = document.getElementById(fieldId);
                    if (field) {
                        field.value = '';

                });
                
            } else {
                // Afficher section nouveau client, masquer client existant
                clientExistantSection.style.display = 'none';
                nouveauClientSection.style.display = 'block';
                
                // Réinitialiser la sélection du client existant
                const clientSelect = document.getElementById('client');
                if (clientSelect) {
                    clientSelect.selectedIndex = 0;

        });
    });
    
    // Initialiser l'affichage selon la sélection par défaut
    const checkedRadio = Array.from(typeClientRadios).find(radio => radio.checked);
    if (checkedRadio) {
        checkedRadio.dispatchEvent(new Event('change'));

});
</script>

{% endblock content %}