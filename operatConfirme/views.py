from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from django.core.paginator import Paginator
from commande.models import Commande
from django.contrib import messages
from django.contrib.auth.models import User, Group
from parametre.models import Operateur, Ville # Assurez-vous que ce chemin est correct
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.forms import PasswordChangeForm # Importez PasswordChangeForm
from django.http import JsonResponse
import json
from django.utils import timezone
from commande.models import Commande, EtatCommande, EnumEtatCmd, Panier
from datetime import datetime, timedelta
from django.db.models import Sum
from django.db import models, transaction
from client.models import Client
from article.models import Article

# Create your views here.

@login_required
def dashboard(request):
    """Page d'accueil de l'interface op√©rateur de confirmation"""
    from commande.models import Commande, EtatCommande
    from django.utils import timezone
    from datetime import datetime, timedelta
    from django.db.models import Sum
    
    try:
        # R√©cup√©rer le profil op√©rateur de l'utilisateur connect√©
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur de confirmation non trouv√©.")
        return redirect('login')
    
    # Dates pour les calculs de p√©riodes
    today = timezone.now().date()
    week_start = today - timedelta(days=today.weekday())
    
    # R√©cup√©rer les commandes affect√©es √† cet op√©rateur
    commandes_affectees = Commande.objects.filter(
        etats__operateur=operateur,
        etats__date_fin__isnull=True  # √âtats actifs (non termin√©s)
    ).distinct()
    
    # Statistiques des commandes affect√©es √† cet op√©rateur
    stats = {}
    
    # Commandes en attente de confirmation (affect√©es mais pas encore en cours de confirmation)
    stats['commandes_en_attente'] = commandes_affectees.filter(
        etats__enum_etat__libelle='Affect√©e',
        etats__date_fin__isnull=True
    ).count()
    
    # Commandes en cours de confirmation
    stats['commandes_en_cours'] = commandes_affectees.filter(
        etats__enum_etat__libelle='En cours de confirmation',
        etats__date_fin__isnull=True
    ).count()
    
    # Commandes confirm√©es par cet op√©rateur (toutes)
    commandes_confirmees_all = Commande.objects.filter(
        etats__operateur=operateur,
        etats__enum_etat__libelle='Confirm√©e'
    ).distinct()
    
    stats['commandes_confirmees'] = commandes_confirmees_all.count()
    
    # Commandes confirm√©es aujourd'hui
    stats['commandes_confirmees_aujourd_hui'] = commandes_confirmees_all.filter(
        etats__date_debut__date=today
    ).count()
    
    # Commandes confirm√©es cette semaine
    stats['commandes_confirmees_semaine'] = commandes_confirmees_all.filter(
        etats__date_debut__date__gte=week_start
    ).count()
    
    # Valeur totale des commandes confirm√©es
    valeur_totale = commandes_confirmees_all.aggregate(
        total=Sum('total_cmd')
    )['total'] or 0
    stats['valeur_totale_confirmees'] = valeur_totale
    
    # Commandes marqu√©es erron√©es par cet op√©rateur
    stats['commandes_erronnees'] = Commande.objects.filter(
        etats__operateur=operateur,
        etats__enum_etat__libelle='Erron√©e'
    ).distinct().count()
    
    stats['total_commandes'] = commandes_affectees.count()
    
    # Taux de performance
    if stats['total_commandes'] > 0:
        stats['taux_confirmation'] = round((stats['commandes_confirmees'] / stats['total_commandes']) * 100, 1)
    else:
        stats['taux_confirmation'] = 0
    
    context = {
        'operateur': operateur,
        **stats  # Ajouter toutes les statistiques au contexte
    }
    
    return render(request, 'composant_generale/operatConfirme/home.html', context)

@login_required
def liste_commandes(request):
    """Liste des commandes affect√©es √† l'op√©rateur de confirmation connect√©"""
    from django.core.paginator import Paginator
    from django.db.models import Q, Count, Sum
    from commande.models import Commande, EtatCommande
    
    try:
        # R√©cup√©rer le profil op√©rateur de l'utilisateur connect√©
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur de confirmation non trouv√©.")
        return redirect('login')
    
    # R√©cup√©rer TOUTES les commandes affect√©es √† cet op√©rateur (Affect√©es + En cours de confirmation)
    commandes_affectees = Commande.objects.filter(
        etats__operateur=operateur,
        etats__date_fin__isnull=True  # √âtats actifs (non termin√©s)
    ).distinct().select_related(
        'client', 'ville', 'ville__region'
    ).prefetch_related(
        'etats__enum_etat', 'paniers__article'
    ).order_by('-date_cmd', '-date_creation')
    
    # Recherche
    search_query = request.GET.get('search', '').strip()
    if search_query:
        commandes_affectees = commandes_affectees.filter(
            Q(id_yz__icontains=search_query) |
            Q(num_cmd__icontains=search_query) |
            Q(client__nom__icontains=search_query) |
            Q(client__prenom__icontains=search_query) |
            Q(client__numero_tel__icontains=search_query) |
            Q(ville__nom__icontains=search_query) |
            Q(adresse__icontains=search_query)
        )
    
    # Statistiques des commandes affect√©es √† cet op√©rateur
    stats = {}
    
    # Commandes en attente de confirmation (affect√©es mais pas encore en cours de confirmation)
    stats['commandes_en_attente'] = commandes_affectees.filter(
        etats__enum_etat__libelle='Affect√©e',
        etats__date_fin__isnull=True
    ).count()
    
    # Commandes en cours de confirmation
    stats['commandes_en_cours'] = commandes_affectees.filter(
        etats__enum_etat__libelle='En cours de confirmation',
        etats__date_fin__isnull=True
    ).count()
    
    # Commandes confirm√©es par cet op√©rateur
    stats['commandes_confirmees'] = Commande.objects.filter(
        etats__operateur=operateur,
        etats__enum_etat__libelle='Confirm√©e'
    ).count()
    
    # Commandes marqu√©es erron√©es par cet op√©rateur
    stats['commandes_erronnees'] = Commande.objects.filter(
        etats__operateur=operateur,
        etats__enum_etat__libelle='Erron√©e'
    ).count()
    
    stats['total_commandes'] = commandes_affectees.count()
    
    # Pagination
    paginator = Paginator(commandes_affectees, 15)  # 15 commandes par page
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search_query': search_query,
        'operateur': operateur,
        **stats  # Ajouter toutes les statistiques au contexte
    }
    
    return render(request, 'operatConfirme/liste_commande.html', context)

@login_required
def confirmer_commande_ajax(request, commande_id):
    """Confirme une commande sp√©cifique via AJAX depuis la page de confirmation"""
    from commande.models import Commande, EtatCommande, EnumEtatCmd, Operation
    from article.models import Article
    from django.http import JsonResponse
    from django.utils import timezone
    from django.db import transaction
    
    if request.method == 'POST':
        try:
            import json
            data = json.loads(request.body)
            commentaire = data.get('commentaire', '')
        except:
            commentaire = ''
    
    try:
        # R√©cup√©rer l'op√©rateur
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'Profil d\'op√©rateur de confirmation non trouv√©.'})
    
    try:
        commande = Commande.objects.get(id=commande_id)
        
        # V√©rifier que la commande est affect√©e √† cet op√©rateur
        etat_actuel = commande.etat_actuel
        if not (etat_actuel and etat_actuel.operateur == operateur):
            return JsonResponse({'success': False, 'message': 'Cette commande ne vous est pas affect√©e.'})
        
        # V√©rifier que la commande n'est pas d√©j√† confirm√©e
        if etat_actuel.enum_etat.libelle == 'Confirm√©e':
            return JsonResponse({'success': False, 'message': 'Cette commande est d√©j√† confirm√©e.'})
            
        # V√©rifier qu'au moins une op√©ration a √©t√© effectu√©e
        operations_effectuees = Operation.objects.filter(
            commande=commande,
            operateur=operateur,
            type_operation__in=[
                'APPEL', 'Appel Whatsapp', 'Message Whatsapp', 'Vocal Whatsapp', 'ENVOI_SMS'
            ]
        ).exists()
        
        if not operations_effectuees:
            return JsonResponse({
                'success': False, 
                'message': 'Vous devez effectuer au moins une op√©ration (appel, message, etc.) avant de confirmer la commande.'
            })
        
        # Utiliser une transaction pour la confirmation et la d√©cr√©mentation du stock
        with transaction.atomic():
            print(f"üéØ DEBUG: D√©but de la confirmation de la commande {commande.id_yz}")
            
            # IMPORTANT: R√©cup√©rer et sauvegarder les informations de livraison depuis le formulaire
            # Ces informations doivent √™tre envoy√©es avec la requ√™te de confirmation
            try:
                if 'ville_livraison' in data and data['ville_livraison']:
                    from parametre.models import Ville
                    nouvelle_ville = Ville.objects.get(id=data['ville_livraison'])
                    commande.ville = nouvelle_ville
                    print(f"üèôÔ∏è DEBUG: Ville de livraison mise √† jour: {nouvelle_ville.nom}")
                
                if 'adresse_livraison' in data:
                    commande.adresse = data['adresse_livraison']
                    print(f"üìç DEBUG: Adresse de livraison mise √† jour: {data['adresse_livraison'][:50]}...")
                
                # Sauvegarder les modifications de la commande
                commande.save()
                print(f"üíæ DEBUG: Informations de livraison sauvegard√©es")
                
            except Ville.DoesNotExist:
                print(f"‚ùå DEBUG: Ville de livraison non trouv√©e: {data.get('ville_livraison')}")
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG: Erreur lors de la sauvegarde des infos de livraison: {str(e)}")
            
            # V√©rifier le stock et d√©cr√©menter les articles
            articles_decr√©mentes = []
            stock_insuffisant = []
            
            for panier in commande.paniers.all():
                article = panier.article
                quantite_commandee = panier.quantite
                
                print(f"üì¶ DEBUG: Article {article.nom} (ID:{article.id})")
                print(f"   - Stock actuel: {article.qte_disponible}")
                print(f"   - Quantit√© command√©e: {quantite_commandee}")
                
                # V√©rifier si le stock est suffisant
                if article.qte_disponible < quantite_commandee:
                    stock_insuffisant.append({
                        'article': article.nom,
                        'stock_actuel': article.qte_disponible,
                        'quantite_demandee': quantite_commandee
                    })
                    print(f"‚ùå DEBUG: Stock insuffisant pour {article.nom}")
                else:
                    # D√©cr√©menter le stock
                    ancien_stock = article.qte_disponible
                    article.qte_disponible -= quantite_commandee
                    article.save()
                    
                    articles_decr√©mentes.append({
                        'article': article.nom,
                        'ancien_stock': ancien_stock,
                        'nouveau_stock': article.qte_disponible,
                        'quantite_decr√©mentent√©e': quantite_commandee
                    })
                    
                    print(f"‚úÖ DEBUG: Stock mis √† jour pour {article.nom}")
                    print(f"   - Ancien stock: {ancien_stock}")
                    print(f"   - Nouveau stock: {article.qte_disponible}")
            
            # Si il y a des probl√®mes de stock, annuler la transaction
            if stock_insuffisant:
                error_msg = f"Stock insuffisant pour : "
                for item in stock_insuffisant:
                    error_msg += f"\n‚Ä¢ {item['article']}: Stock={item['stock_actuel']}, Demand√©={item['quantite_demandee']}"
                
                print(f"‚ùå DEBUG: Confirmation annul√©e - probl√®mes de stock")
                for item in stock_insuffisant:
                    print(f"   - {item['article']}: {item['stock_actuel']}/{item['quantite_demandee']}")
                
                return JsonResponse({
                    'success': False, 
                    'message': error_msg,
                    'stock_insuffisant': stock_insuffisant
                })
            
            # Cr√©er le nouvel √©tat "confirm√©e"
            enum_confirmee = EnumEtatCmd.objects.get(libelle='Confirm√©e')
            
            # Fermer l'√©tat actuel
            etat_actuel.date_fin = timezone.now()
            etat_actuel.save()
            print(f"üîÑ DEBUG: √âtat actuel ferm√©: {etat_actuel.enum_etat.libelle}")
            
            # Cr√©er le nouvel √©tat
            nouvel_etat = EtatCommande.objects.create(
                commande=commande,
                enum_etat=enum_confirmee,
                operateur=operateur,
                date_debut=timezone.now(),
                commentaire=commentaire
            )
            print(f"‚úÖ DEBUG: Nouvel √©tat cr√©√©: Confirm√©e")
            
            # Log des articles d√©cr√©mernts
            print(f"üìä DEBUG: R√©sum√© de la d√©cr√©mentation:")
            print(f"   - {len(articles_decr√©mentes)} article(s) d√©cr√©ment√©(s)")
            for item in articles_decr√©mentes:
                print(f"   - {item['article']}: {item['ancien_stock']} ‚Üí {item['nouveau_stock']} (-{item['quantite_decr√©mentent√©e']})")
        
        return JsonResponse({
            'success': True, 
            'message': f'Commande {commande.id_yz} confirm√©e avec succ√®s.',
            'articles_decr√©mentes': len(articles_decr√©mentes),
            'details_stock': articles_decr√©mentes
        })
        
    except Commande.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'Commande non trouv√©e.'})
    except EnumEtatCmd.DoesNotExist:
        return JsonResponse({'success': False, 'message': '√âtat "Confirm√©e" non trouv√© dans la configuration.'})
    except Exception as e:
        print(f"‚ùå DEBUG: Erreur lors de la confirmation: {str(e)}")
        import traceback
        traceback.print_exc()
        return JsonResponse({'success': False, 'message': f'Erreur: {str(e)}'})

@login_required
def confirmer_commande(request, commande_id):
    """Confirmer une commande"""
    from commande.models import Commande, EtatCommande, EnumEtatCmd
    from django.utils import timezone
    from django.http import JsonResponse
    
    if request.method == 'POST':
        try:
            # R√©cup√©rer l'op√©rateur
            operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
            
            # R√©cup√©rer la commande
            commande = Commande.objects.get(pk=commande_id)
            
            # V√©rifier que la commande est bien affect√©e √† cet op√©rateur
            etat_actuel = commande.etats.filter(
                operateur=operateur,
                date_fin__isnull=True
            ).first()
            
            if not etat_actuel:
                messages.error(request, "Cette commande ne vous est pas affect√©e.")
                return redirect('operatConfirme:liste_commandes')
            
            # Terminer l'√©tat actuel
            etat_actuel.terminer_etat(operateur)
            
            # Cr√©er un nouvel √©tat "confirm√©e"
            enum_confirmee = EnumEtatCmd.objects.get(libelle='Confirm√©e')
            EtatCommande.objects.create(
                commande=commande,
                enum_etat=enum_confirmee,
                operateur=operateur,
                commentaire=request.POST.get('commentaire', '')
            )
            
            messages.success(request, f"Commande {commande.id_yz} confirm√©e avec succ√®s.")
            
            # R√©ponse JSON pour AJAX
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({'success': True, 'message': 'Commande confirm√©e'})
                
        except Exception as e:
            messages.error(request, f"Erreur lors de la confirmation : {str(e)}")
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({'success': False, 'message': str(e)})
    
    return redirect('operatConfirme:liste_commandes')

@login_required
def marquer_erronnee(request, commande_id):
    """Marquer une commande comme erron√©e"""
    from commande.models import Commande, EtatCommande, EnumEtatCmd
    from django.utils import timezone
    from django.http import JsonResponse
    
    if request.method == 'POST':
        try:
            # R√©cup√©rer l'op√©rateur
            operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
            
            # R√©cup√©rer la commande
            commande = Commande.objects.get(pk=commande_id)
            
            # V√©rifier que la commande est bien affect√©e √† cet op√©rateur
            etat_actuel = commande.etats.filter(
                operateur=operateur,
                date_fin__isnull=True
            ).first()
            
            if not etat_actuel:
                messages.error(request, "Cette commande ne vous est pas affect√©e.")
                return redirect('operatConfirme:liste_commandes')
            
            # Terminer l'√©tat actuel
            etat_actuel.terminer_etat(operateur)
            
            # Cr√©er un nouvel √©tat "erron√©e"
            enum_erronnee = EnumEtatCmd.objects.get(libelle='Erron√©e')
            EtatCommande.objects.create(
                commande=commande,
                enum_etat=enum_erronnee,
                operateur=operateur,
                commentaire=request.POST.get('motif', '')
            )
            
            messages.success(request, f"Commande {commande.id_yz} marqu√©e comme erron√©e.")
            
            # R√©ponse JSON pour AJAX
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({'success': True, 'message': 'Commande marqu√©e comme erron√©e'})
                
        except Exception as e:
            messages.error(request, f"Erreur lors de l'op√©ration : {str(e)}")
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({'success': False, 'message': str(e)})
    
    return redirect('operatConfirme:liste_commandes')

@login_required
def parametre(request):
    """Page des param√®tres op√©rateur confirmation"""
    return render(request, 'operatConfirme/parametre.html')

@login_required
def commandes_confirmees(request):
    """Vue pour afficher les commandes confirm√©es par l'op√©rateur connect√©"""
    from django.utils import timezone
    from datetime import timedelta
    
    try:
        # R√©cup√©rer l'objet Operateur correspondant √† l'utilisateur connect√©
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
        
        # R√©cup√©rer seulement les commandes confirm√©es par cet op√©rateur
        mes_commandes_confirmees = Commande.objects.filter(
            etats__enum_etat__libelle='Confirm√©e',
            etats__date_fin__isnull=True,
            etats__operateur=operateur  # Utiliser l'objet Operateur
        ).select_related('client', 'ville', 'ville__region').prefetch_related('etats', 'operations').distinct()
        

        
        # Tri par date de confirmation (plus r√©centes en premier)
        mes_commandes_confirmees = mes_commandes_confirmees.order_by('-etats__date_debut')
        
        # Calcul des statistiques
        today = timezone.now().date()
        week_start = today - timedelta(days=today.weekday())
        
        stats = {}
        stats['total_confirmees'] = mes_commandes_confirmees.count()
        
        # Valeur totale des commandes confirm√©es
        valeur_totale = mes_commandes_confirmees.aggregate(
            total=Sum('total_cmd')
        )['total'] or 0
        stats['valeur_totale'] = valeur_totale
        
        # Commandes confirm√©es cette semaine
        stats['confirmees_semaine'] = mes_commandes_confirmees.filter(
            etats__date_debut__date__gte=week_start,
            etats__enum_etat__libelle='Confirm√©e'
        ).count()
        
        # Commandes confirm√©es aujourd'hui
        stats['confirmees_aujourdhui'] = mes_commandes_confirmees.filter(
            etats__date_debut__date=today,
            etats__enum_etat__libelle='Confirm√©e'
        ).count()
        
    except Operateur.DoesNotExist:
        # Si l'utilisateur n'est pas un op√©rateur, liste vide
        mes_commandes_confirmees = Commande.objects.none()
        stats = {
            'total_confirmees': 0,
            'valeur_totale': 0,
            'confirmees_semaine': 0,
            'confirmees_aujourdhui': 0
        }
    
    context = {
        'mes_commandes_confirmees': mes_commandes_confirmees,
        'stats': stats,
    }
    
    return render(request, 'operatConfirme/commandes_confirmees.html', context)

@login_required
def creer_operateur_confirme(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        nom = request.POST.get('nom')
        prenom = request.POST.get('prenom')
        mail = request.POST.get('mail')
        telephone = request.POST.get('telephone')
        adresse = request.POST.get('adresse')

        # Validation de base (vous pouvez ajouter des validations plus robustes ici)
        if not all([username, password, nom, prenom, mail]):
            messages.error(request, "Tous les champs obligatoires doivent √™tre remplis.")
            return render(request, 'composant_generale/creer_operateur.html', {'form_data': request.POST})
        
        if User.objects.filter(username=username).exists():
            messages.error(request, "Ce nom d'utilisateur existe d√©j√†.")
            return render(request, 'composant_generale/creer_operateur.html', {'form_data': request.POST})
        
        if User.objects.filter(email=mail).exists():
            messages.error(request, "Cet email est d√©j√† utilis√©.")
            return render(request, 'composant_generale/creer_operateur.html', {'form_data': request.POST})

        try:
            # Cr√©er l'utilisateur Django
            user = User.objects.create_user(
                username=username,
                email=mail,
                password=password,
                first_name=prenom,
                last_name=nom
            )
            user.save()

            # Cr√©er le profil Operateur
            operateur = Operateur.objects.create(
                user=user,
                nom=nom,
                prenom=prenom,
                mail=mail,
                type_operateur='CONFIRMATION',
                telephone=telephone,
                adresse=adresse
            )
            operateur.save()

            # Ajouter l'utilisateur au groupe 'operateur_confirme'
            group, created = Group.objects.get_or_create(name='operateur_confirme')
            user.groups.add(group)

            messages.success(request, f"L'op√©rateur de confirmation {prenom} {nom} a √©t√© cr√©√© avec succ√®s.")
            return redirect('app_admin:liste_operateurs') # Rediriger vers la liste des op√©rateurs

        except Exception as e:
            messages.error(request, f"Une erreur est survenue lors de la cr√©ation de l'op√©rateur : {e}")
            # Si l'utilisateur a √©t√© cr√©√© mais pas l'op√©rateur, le supprimer pour √©viter les orphelins
            if 'user' in locals() and user.pk: 
                user.delete()
            return render(request, 'composant_generale/creer_operateur.html', {'form_data': request.POST})

    return render(request, 'composant_generale/creer_operateur.html')

@login_required
def profile_confirme(request):
    """Page de profil pour l'op√©rateur de confirmation"""
    try:
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur non trouv√©.")
        return redirect('login') # Rediriger vers la page de connexion ou une page d'erreur
    return render(request, 'operatConfirme/profile.html', {'operateur': operateur})

@login_required
def modifier_profile_confirme(request):
    """Page de modification de profil pour l'op√©rateur de confirmation"""
    try:
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur non trouv√©.")
        return redirect('login')

    user = request.user

    if request.method == 'POST':
        # R√©cup√©rer les donn√©es du formulaire
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        email = request.POST.get('email')
        telephone = request.POST.get('telephone')
        adresse = request.POST.get('adresse')

        # Validation de base
        if not all([first_name, last_name, email]):
            messages.error(request, "Le pr√©nom, le nom et l'email sont obligatoires.")
            return render(request, 'operatConfirme/modifier_profile.html', {'operateur': operateur, 'user': user})

        # V√©rifier si l'email est d√©j√† utilis√© par un autre utilisateur (sauf l'utilisateur actuel)
        if User.objects.filter(email=email).exclude(pk=user.pk).exists():
            messages.error(request, "Cet email est d√©j√† utilis√© par un autre compte.")
            return render(request, 'operatConfirme/modifier_profile.html', {'operateur': operateur, 'user': user})
        
        try:
            # Mettre √† jour l'objet User
            user.first_name = first_name
            user.last_name = last_name
            user.email = email
            user.save()

            # Mettre √† jour l'objet Operateur
            operateur.nom = last_name # Mettre √† jour le nom de famille de l'op√©rateur
            operateur.prenom = first_name # Mettre √† jour le pr√©nom de l'op√©rateur
            operateur.mail = email
            operateur.telephone = telephone
            operateur.adresse = adresse
            # G√©rer le t√©l√©chargement de la photo
            if 'photo' in request.FILES:
                operateur.photo = request.FILES['photo']
            elif request.POST.get('photo-clear'): # Si une case √† cocher pour supprimer la photo est pr√©sente
                operateur.photo = None

            # Ne pas modifier type_operateur ou actif
            operateur.save()

            messages.success(request, "Votre profil a √©t√© mis √† jour avec succ√®s.")
            return redirect('operatConfirme:profile')

        except Exception as e:
            messages.error(request, f"Une erreur est survenue lors de la mise √† jour : {e}")

    return render(request, 'operatConfirme/modifier_profile.html', {'operateur': operateur, 'user': user})

@login_required
def changer_mot_de_passe_confirme(request):
    """Page de changement de mot de passe pour l'op√©rateur de confirmation - D√©sactiv√©e"""
    return redirect('operatConfirme:profile')

@login_required
def detail_commande(request, commande_id):
    """Aper√ßu d√©taill√© d'une commande avec possibilit√© de modification"""
    from commande.models import Commande, EtatCommande, EnumEtatCmd
    from django.shortcuts import get_object_or_404
    from django.http import JsonResponse
    
    try:
        # R√©cup√©rer l'op√©rateur
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur de confirmation non trouv√©.")
        return redirect('login')
    
    # R√©cup√©rer la commande avec toutes les relations
    commande = get_object_or_404(
        Commande.objects.select_related(
            'client', 'ville', 'ville__region'
        ).prefetch_related(
            'paniers__article', 'etats__enum_etat', 'etats__operateur'
        ),
        pk=commande_id
    )
    
    # V√©rifier que la commande est bien affect√©e √† cet op√©rateur
    etat_actuel = commande.etats.filter(
        operateur=operateur,
        date_fin__isnull=True
    ).first()
    
    if not etat_actuel:
        messages.error(request, "Cette commande ne vous est pas affect√©e.")
        return redirect('operatConfirme:liste_commandes')
    
    # Traitement de la modification si POST
    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'modifier_commande':
            # Modifier les champs modifiables
            nouvelle_adresse = request.POST.get('adresse', '').strip()
            nouveau_telephone = request.POST.get('telephone', '').strip()
            commentaire = request.POST.get('commentaire', '').strip()
            
            # Mise √† jour des champs
            if nouvelle_adresse:
                commande.adresse = nouvelle_adresse
            
            if nouveau_telephone:
                commande.client.numero_tel = nouveau_telephone
                commande.client.save()
            
            commande.save()
            
            # Ajouter un commentaire si fourni
            if commentaire:
                etat_actuel.commentaire = commentaire
                etat_actuel.save()
            
            messages.success(request, "Commande mise √† jour avec succ√®s.")
            
            # R√©ponse JSON pour AJAX
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({'success': True, 'message': 'Commande mise √† jour'})
        
        elif action == 'confirmer':
            return confirmer_commande(request, commande_id)
        
        elif action == 'marquer_erronnee':
            return marquer_erronnee(request, commande_id)
    
    # Calculer le sous-total des articles
    total_articles = sum(panier.sous_total for panier in commande.paniers.all())
    
    context = {
        'commande': commande,
        'etat_actuel': etat_actuel,
        'operateur': operateur,
        'total_articles': total_articles,
        'historique_etats': commande.historique_etats
    }
    
    return render(request, 'operatConfirme/detail_commande.html', context)

@login_required
def confirmation(request):
    """Page d√©di√©e √† la confirmation des commandes"""
    from commande.models import Commande, EtatCommande, EnumEtatCmd
    from django.http import JsonResponse
    from django.utils import timezone
    
    try:
        # R√©cup√©rer l'op√©rateur
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur de confirmation non trouv√©.")
        return redirect('login')
    
    # R√©cup√©rer les commandes "Affect√©es" ET "En cours de confirmation"
    commandes_a_confirmer = Commande.objects.filter(
        etats__operateur=operateur,
        etats__date_fin__isnull=True,  # √âtats actifs (non termin√©s)
        etats__enum_etat__libelle__in=['Affect√©e', 'En cours de confirmation']  # Affect√©es ET en cours
    ).select_related(
        'client', 'ville', 'ville__region'
    ).prefetch_related(
        'paniers__article', 'etats__enum_etat'
    ).distinct().order_by('-date_cmd', '-date_creation')
    
    context = {
        'operateur': operateur,
        'commandes_a_confirmer': commandes_a_confirmer,
    }
    
    return render(request, 'operatConfirme/confirmation.html', context)

@login_required
def lancer_confirmations(request):
    """Lance le processus de confirmation automatique pour l'op√©rateur"""
    from django.http import JsonResponse
    from commande.models import Commande, EtatCommande, EnumEtatCmd
    
    if request.method == 'POST':
        try:
            # R√©cup√©rer l'op√©rateur
            operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
            
            # R√©cup√©rer toutes les commandes affect√©es √† cet op√©rateur qui sont en attente
            commandes_a_traiter = Commande.objects.filter(
                etats__operateur=operateur,
                etats__date_fin__isnull=True,
                etats__enum_etat__libelle='affectee'
            ).distinct()
            
            # Compteur pour les commandes trait√©es
            commandes_traitees = 0
            erreurs = []
            
            for commande in commandes_a_traiter:
                try:
                    # R√©cup√©rer l'√©tat actuel
                    etat_actuel = commande.etats.filter(
                        operateur=operateur,
                        date_fin__isnull=True
                    ).first()
                    
                    if etat_actuel:
                        # Terminer l'√©tat actuel
                        etat_actuel.terminer_etat(operateur)
                        
                        # Cr√©er un nouvel √©tat "en cours de confirmation"
                        enum_en_cours = EnumEtatCmd.objects.get_or_create(
                            libelle='en_cours_confirmation',
                            defaults={'ordre': 2, 'couleur': '#3B82F6'}
                        )[0]
                        
                        EtatCommande.objects.create(
                            commande=commande,
                            enum_etat=enum_en_cours,
                            operateur=operateur,
                            commentaire='Processus de confirmation automatique lanc√©'
                        )
                        
                        commandes_traitees += 1
                        
                except Exception as e:
                    erreurs.append(f"Commande {commande.id_yz}: {str(e)}")
            
            # Pr√©parer la r√©ponse
            if erreurs:
                message = f"{commandes_traitees} commandes trait√©es avec {len(erreurs)} erreurs."
                return JsonResponse({
                    'success': True,
                    'message': message,
                    'commandes_traitees': commandes_traitees,
                    'erreurs': erreurs
                })
            else:
                message = f"Processus lanc√© avec succ√®s ! {commandes_traitees} commandes mises en cours de confirmation."
                return JsonResponse({
                    'success': True,
                    'message': message,
                    'commandes_traitees': commandes_traitees
                })
                
        except Operateur.DoesNotExist:
            return JsonResponse({
                'success': False,
                'message': "Profil d'op√©rateur non trouv√©."
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': f"Erreur lors du traitement: {str(e)}"
            })
    
    return JsonResponse({'success': False, 'message': 'M√©thode non autoris√©e'})

@login_required
def selectionner_operation(request):
    """Vue AJAX pour s√©lectionner une op√©ration pour une commande"""
    if request.method == 'POST':
        try:
            import json
            data = json.loads(request.body)
            commande_id = data.get('commande_id')
            type_operation = data.get('type_operation')
            commentaire = data.get('commentaire', '')
            
            if not commande_id or not type_operation:
                return JsonResponse({
                    'success': False,
                    'message': 'Donn√©es manquantes'
                })
            
            # R√©cup√©rer l'op√©rateur
            operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
            
            # R√©cup√©rer la commande
            commande = Commande.objects.get(id=commande_id)
            
            # V√©rifier que la commande est en cours de confirmation par cet op√©rateur
            etat_actuel = commande.etats.filter(
                operateur=operateur,
                date_fin__isnull=True,
                enum_etat__libelle='En cours de confirmation'
            ).first()
            
            if not etat_actuel:
                return JsonResponse({
                    'success': False,
                    'message': 'Cette commande n\'est pas en cours de confirmation par vous'
                })
            
            # Supprimer l'ancienne op√©ration si elle existe pour cette commande
            from commande.models import Operation
            Operation.objects.filter(
                commande=commande,
                operateur=operateur,
                type_operation__in=[
                    'AUCUNE_ACTION', 'APPEL_1', 'APPEL_2', 'APPEL_3', 'APPEL_4',
                    'APPEL_5', 'APPEL_6', 'APPEL_7', 'APPEL_8', 'ENVOI_SMS',
                    'ENVOI_MSG', 'PROPOSITION_ABONNEMENT', 'PROPOSITION_REDUCTION'
                ]
            ).delete()
            
            # Cr√©er la nouvelle op√©ration
            conclusion = commentaire if commentaire else f"Op√©ration s√©lectionn√©e : {dict(Operation.TYPE_OPERATION_CHOICES)[type_operation]}"
            
            operation = Operation.objects.create(
                commande=commande,
                type_operation=type_operation,
                conclusion=conclusion,
                operateur=operateur
            )
            
            return JsonResponse({
                'success': True,
                'message': f'Op√©ration "{operation.get_type_operation_display()}" s√©lectionn√©e',
                'operation_display': operation.get_type_operation_display()
            })
            
        except Operateur.DoesNotExist:
            return JsonResponse({
                'success': False,
                'message': 'Profil d\'op√©rateur non trouv√©'
            })
        except Commande.DoesNotExist:
            return JsonResponse({
                'success': False,
                'message': 'Commande non trouv√©e'
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': f'Erreur: {str(e)}'
            })
    
    return JsonResponse({'success': False, 'message': 'M√©thode non autoris√©e'})

@login_required
def confirmer_commandes_ajax(request):
    """Vue AJAX pour confirmer plusieurs commandes en masse"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            commande_ids = data.get('commande_ids', [])
            
            if not commande_ids:
                return JsonResponse({
                    'success': False,
                    'message': 'Aucune commande s√©lectionn√©e'
                })
            
            # V√©rifier que l'op√©rateur est bien de type confirmation
            if not hasattr(request.user, 'operateurconfirme'):
                return JsonResponse({
                    'success': False,
                    'message': 'Acc√®s non autoris√©'
                })
            
            operateur = request.user.operateurconfirme
            confirmed_count = 0
            
            # √âtat "confirm√©e"
            try:
                etat_confirmee = EnumEtatCmd.objects.get(libelle='confirmee')
            except EnumEtatCmd.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': '√âtat "confirm√©e" non trouv√© dans le syst√®me'
                })
            
            for commande_id in commande_ids:
                try:
                    # R√©cup√©rer la commande
                    commande = Commande.objects.get(
                        id=commande_id,
                        etats__operateur=operateur,
                        etats__date_fin__isnull=True
                    )
                    
                    # R√©cup√©rer l'√©tat actuel (non termin√©) de cette commande pour cet op√©rateur
                    etat_actuel = commande.etats.filter(
                        operateur=operateur,
                        date_fin__isnull=True
                    ).first()
                    
                    if etat_actuel:
                        # Terminer l'√©tat actuel
                        etat_actuel.date_fin = timezone.now()
                        etat_actuel.save()
                        
                        # Cr√©er le nouvel √©tat "confirm√©e"
                        EtatCommande.objects.create(
                            commande=commande,
                            enum_etat=etat_confirmee,
                            operateur=operateur,
                            date_debut=timezone.now(),
                            commentaire=f"Commande confirm√©e via confirmation en masse"
                        )
                        
                        confirmed_count += 1
                
                except Commande.DoesNotExist:
                    continue  # Ignorer les commandes non trouv√©es
                except Exception as e:
                    continue  # Ignorer les erreurs individuelles
            
            if confirmed_count > 0:
                return JsonResponse({
                    'success': True,
                    'message': f'{confirmed_count} commande(s) confirm√©e(s) avec succ√®s'
                })
            else:
                return JsonResponse({
                    'success': False,
                    'message': 'Aucune commande n\'a pu √™tre confirm√©e'
                })
                
        except json.JSONDecodeError:
            return JsonResponse({
                'success': False,
                'message': 'Donn√©es JSON invalides'
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': f'Erreur lors de la confirmation: {str(e)}'
            })
    
    return JsonResponse({
        'success': False,
        'message': 'M√©thode non autoris√©e'
    })

@login_required
def lancer_confirmation(request, commande_id):
    """Vue pour lancer la confirmation d'une commande (Affect√©e -> En cours de confirmation)"""
    if request.method == 'POST':
        try:
            # R√©cup√©rer l'op√©rateur de confirmation
            try:
                operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
            except Operateur.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': 'Profil d\'op√©rateur de confirmation non trouv√©'
                })
            
            # R√©cup√©rer la commande
            try:
                commande = Commande.objects.get(id=commande_id)
            except Commande.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': 'Commande non trouv√©e'
                })
            
            # V√©rifier que la commande est dans l'√©tat "Affect√©e"
            etat_actuel = commande.etats.filter(
                operateur=operateur,
                date_fin__isnull=True
            ).first()
            
            if not etat_actuel:
                return JsonResponse({
                    'success': False,
                    'message': 'Cette commande ne vous est pas affect√©e'
                })
            
            if etat_actuel.enum_etat.libelle.lower() == 'en cours de confirmation':
                return JsonResponse({
                    'success': True,
                    'message': 'La commande est d√©j√† en cours de confirmation'
                })
            
            if etat_actuel.enum_etat.libelle.lower() != 'affect√©e':
                return JsonResponse({
                    'success': False,
                    'message': f'Cette commande est d√©j√† en √©tat "{etat_actuel.enum_etat.libelle}" et ne peut pas √™tre mise en cours de confirmation'
                })
            
            # √âtats requis
            try:
                etat_en_cours = EnumEtatCmd.objects.get(libelle='En cours de confirmation')
            except EnumEtatCmd.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': '√âtat "En cours de confirmation" non trouv√© dans le syst√®me'
                })
            
            # Terminer l'√©tat actuel
            etat_actuel.date_fin = timezone.now()
            etat_actuel.save()
            
            # Cr√©er le nouvel √©tat "En cours de confirmation"
            EtatCommande.objects.create(
                commande=commande,
                enum_etat=etat_en_cours,
                operateur=operateur,
                date_debut=timezone.now(),
                commentaire="Confirmation lanc√©e par l'op√©rateur"
            )
            
            return JsonResponse({
                'success': True,
                'message': f'Confirmation lanc√©e avec succ√®s pour la commande {commande.id_yz}'
            })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': f'Erreur lors du lancement de la confirmation: {str(e)}'
            })
    
    return JsonResponse({
        'success': False,
        'message': 'M√©thode non autoris√©e'
    })

@login_required
def lancer_confirmations_masse(request):
    """Vue AJAX pour lancer la confirmation de plusieurs commandes en masse"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            commande_ids = data.get('commande_ids', [])
            
            if not commande_ids:
                return JsonResponse({
                    'success': False,
                    'message': 'Aucune commande s√©lectionn√©e'
                })
            
            # R√©cup√©rer l'op√©rateur de confirmation
            try:
                operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
            except Operateur.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': 'Profil d\'op√©rateur de confirmation non trouv√©'
                })
            
            launched_count = 0
            
            # √âtat "En cours de confirmation"
            try:
                etat_en_cours = EnumEtatCmd.objects.get(libelle='En cours de confirmation')
            except EnumEtatCmd.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': '√âtat "En cours de confirmation" non trouv√© dans le syst√®me'
                })
            
            for commande_id in commande_ids:
                try:
                    # R√©cup√©rer la commande
                    commande = Commande.objects.get(
                        id=commande_id,
                        etats__operateur=operateur,
                        etats__date_fin__isnull=True
                    )
                    
                    # R√©cup√©rer l'√©tat actuel (non termin√©) de cette commande pour cet op√©rateur
                    etat_actuel = commande.etats.filter(
                        operateur=operateur,
                        date_fin__isnull=True
                    ).first()
                    
                    # V√©rifier que la commande est dans l'√©tat "Affect√©e"
                    if etat_actuel and etat_actuel.enum_etat.libelle.lower() == 'affect√©e':
                        # Terminer l'√©tat actuel
                        etat_actuel.date_fin = timezone.now()
                        etat_actuel.save()
                        
                        # Cr√©er le nouvel √©tat "En cours de confirmation"
                        EtatCommande.objects.create(
                            commande=commande,
                            enum_etat=etat_en_cours,
                            operateur=operateur,
                            date_debut=timezone.now(),
                            commentaire="Confirmation lanc√©e en masse"
                        )
                        
                        launched_count += 1
                
                except Commande.DoesNotExist:
                    continue  # Ignorer les commandes non trouv√©es
                except Exception as e:
                    continue  # Ignorer les erreurs individuelles
            
            if launched_count > 0:
                return JsonResponse({
                    'success': True,
                    'message': f'{launched_count} confirmation(s) lanc√©e(s) avec succ√®s'
                })
            else:
                return JsonResponse({
                    'success': False,
                    'message': 'Aucune commande n\'a pu √™tre mise en cours de confirmation'
                })
                
        except json.JSONDecodeError:
            return JsonResponse({
                'success': False,
                'message': 'Donn√©es JSON invalides'
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': f'Erreur lors du lancement: {str(e)}'
            })
    
    return JsonResponse({
        'success': False,
        'message': 'M√©thode non autoris√©e'
    })

@login_required
def annuler_commande_confirmation(request, commande_id):
    """Vue pour annuler d√©finitivement une commande (En cours de confirmation -> Annul√©e)"""
    if request.method == 'POST':
        try:
            import json
            data = json.loads(request.body)
            motif = data.get('motif', '').strip()
            
            if not motif:
                return JsonResponse({
                    'success': False,
                    'message': 'Le motif d\'annulation est obligatoire'
                })
            
            # R√©cup√©rer l'op√©rateur de confirmation
            try:
                operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
            except Operateur.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': 'Profil d\'op√©rateur de confirmation non trouv√©'
                })
            
            # R√©cup√©rer la commande
            try:
                commande = Commande.objects.get(id=commande_id)
            except Commande.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'message': 'Commande non trouv√©e'
                })
            
            # V√©rifier que la commande est dans l'√©tat "En cours de confirmation" ou "Affect√©e"
            etat_actuel = commande.etats.filter(
                operateur=operateur,
                date_fin__isnull=True
            ).first()
            
            if not etat_actuel:
                return JsonResponse({
                    'success': False,
                    'message': 'Cette commande ne vous est pas affect√©e'
                })
            
            if etat_actuel.enum_etat.libelle.lower() == 'annul√©e':
                return JsonResponse({
                    'success': True,
                    'message': 'La commande est d√©j√† annul√©e'
                })
            
            # Autoriser l'annulation depuis "En cours de confirmation" ou "Affect√©e"
            etats_autorises = ['en cours de confirmation', 'affect√©e']
            if etat_actuel.enum_etat.libelle.lower() not in etats_autorises:
                return JsonResponse({
                    'success': False,
                    'message': f'Cette commande est en √©tat "{etat_actuel.enum_etat.libelle}" et ne peut pas √™tre annul√©e depuis cet √©tat'
                })
            
            # R√©cup√©rer ou cr√©er l'√©tat "Annul√©e"
            etat_annulee, created = EnumEtatCmd.objects.get_or_create(
                libelle='Annul√©e',
                defaults={'ordre': 70, 'couleur': '#EF4444'}
            )
            
            # Terminer l'√©tat actuel
            etat_actuel.date_fin = timezone.now()
            etat_actuel.save()
            
            # Cr√©er le nouvel √©tat "Annul√©e"
            EtatCommande.objects.create(
                commande=commande,
                enum_etat=etat_annulee,
                operateur=operateur,
                date_debut=timezone.now(),
                commentaire=f"Commande annul√©e par l'op√©rateur de confirmation - Motif: {motif}"
            )
            
            # Sauvegarder le motif d'annulation dans la commande
            commande.motif_annulation = motif
            commande.save()
            
            # Cr√©er une op√©ration d'annulation
            from commande.models import Operation
            Operation.objects.create(
                commande=commande,
                type_operation='ANNULATION',
                conclusion=motif,
                operateur=operateur
            )
            
            return JsonResponse({
                'success': True,
                'message': f'Commande {commande.id_yz} annul√©e d√©finitivement. Motif: {motif}'
            })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': f'Erreur lors de l\'annulation: {str(e)}'
            })
    
    return JsonResponse({
        'success': False,
        'message': 'M√©thode non autoris√©e'
    })

@login_required
def modifier_commande(request, commande_id):
    """Page de modification compl√®te d'une commande pour les op√©rateurs de confirmation"""
    from commande.models import Commande, Operation
    from parametre.models import Ville
    
    try:
        # R√©cup√©rer l'op√©rateur
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur de confirmation non trouv√©.")
        return redirect('login')
    
    # R√©cup√©rer la commande
    commande = get_object_or_404(Commande, id=commande_id)
    
    # V√©rifier que la commande est affect√©e √† cet op√©rateur
    etat_actuel = commande.etats.filter(
        operateur=operateur,
        date_fin__isnull=True
    ).first()
    
    if not etat_actuel:
        messages.error(request, "Cette commande ne vous est pas affect√©e.")
        return redirect('operatConfirme:confirmation')
    
    if request.method == 'POST':
        try:
            # ================ GESTION DES ACTIONS AJAX SP√âCIFIQUES ================
            action = request.POST.get('action')
            
            if action == 'add_article':
                # Ajouter un nouvel article imm√©diatement
                from article.models import Article
                from commande.models import Panier
                
                article_id = request.POST.get('article_id')
                quantite = int(request.POST.get('quantite', 1))
                
                try:
                    article = Article.objects.get(id=article_id)
                    sous_total = article.prix_unitaire * quantite
                    
                    panier = Panier.objects.create(
                        commande=commande,
                        article=article,
                        quantite=quantite,
                        sous_total=sous_total
                    )
                    
                    # Recalculer le total de la commande
                    total_commande = commande.paniers.aggregate(
                        total=models.Sum('sous_total')
                    )['total'] or 0
                    commande.total_cmd = total_commande
                    commande.save()
                    
                    return JsonResponse({
                        'success': True,
                        'message': 'Article ajout√© avec succ√®s',
                        'article_id': panier.id,
                        'total_commande': float(commande.total_cmd),
                        'nb_articles': commande.paniers.count(),
                    })
                    
                except Article.DoesNotExist:
                    return JsonResponse({
                        'success': False,
                        'error': 'Article non trouv√©'
                    })
                except Exception as e:
                    return JsonResponse({
                        'success': False,
                        'error': str(e)
                    })
            
            elif action == 'replace_article':
                # Remplacer un article existant
                from article.models import Article
                from commande.models import Panier
                
                ancien_article_id = request.POST.get('ancien_article_id')
                nouvel_article_id = request.POST.get('nouvel_article_id')
                nouvelle_quantite = int(request.POST.get('nouvelle_quantite', 1))
                
                try:
                    # Supprimer l'ancien panier
                    ancien_panier = Panier.objects.get(id=ancien_article_id, commande=commande)
                    ancien_panier.delete()
                    
                    # Cr√©er le nouveau panier
                    nouvel_article = Article.objects.get(id=nouvel_article_id)
                    sous_total = nouvel_article.prix_unitaire * nouvelle_quantite
                    
                    nouveau_panier = Panier.objects.create(
                        commande=commande,
                        article=nouvel_article,
                        quantite=nouvelle_quantite,
                        sous_total=sous_total
                    )
                    
                    # Recalculer le total de la commande
                    total_commande = commande.paniers.aggregate(
                        total=models.Sum('sous_total')
                    )['total'] or 0
                    commande.total_cmd = total_commande
                    commande.save()
                    
                    return JsonResponse({
                        'success': True,
                        'message': 'Article remplac√© avec succ√®s',
                        'nouvel_article_id': nouveau_panier.id,
                        'total_commande': float(commande.total_cmd),
                        'nb_articles': commande.paniers.count(),
                    })
                    
                except Panier.DoesNotExist:
                    return JsonResponse({
                        'success': False,
                        'error': 'Article original non trouv√©'
                    })
                except Article.DoesNotExist:
                    return JsonResponse({
                        'success': False,
                        'error': 'Nouvel article non trouv√©'
                    })
                except Exception as e:
                    return JsonResponse({
                        'success': False,
                        'error': str(e)
                    })
            
            elif action == 'delete_article':
                # Supprimer un article
                from commande.models import Panier
                
                article_id = request.POST.get('article_id')
                
                try:
                    panier = Panier.objects.get(id=article_id, commande=commande)
                    panier.delete()
                    
                    # Recalculer le total de la commande
                    total_commande = commande.paniers.aggregate(
                        total=models.Sum('sous_total')
                    )['total'] or 0
                    commande.total_cmd = total_commande
                    commande.save()
                    
                    return JsonResponse({
                        'success': True,
                        'message': 'Article supprim√© avec succ√®s',
                        'total_commande': float(commande.total_cmd),
                        'nb_articles': commande.paniers.count(),
                    })
                    
                except Panier.DoesNotExist:
                    return JsonResponse({
                        'success': False,
                        'error': 'Article non trouv√©'
                    })
                except Exception as e:
                    return JsonResponse({
                        'success': False,
                        'error': str(e)
                    })
            
            elif action == 'update_operation':
                # Mettre √† jour une op√©ration existante
                try:
                    from commande.models import Operation
                    import logging
                    logger = logging.getLogger(__name__)
                    
                    operation_id = request.POST.get('operation_id')
                    nouveau_commentaire = request.POST.get('nouveau_commentaire', '').strip()
                    
                    print(f"üîÑ DEBUG: Mise √† jour op√©ration {operation_id} pour commande {commande.id}")
                    print(f"üìù DEBUG: Nouveau commentaire: '{nouveau_commentaire}'")
                    print(f"üîç DEBUG: Donn√©es POST re√ßues: {dict(request.POST)}")
                    
                    if not operation_id or not nouveau_commentaire:
                        print(f"‚ùå DEBUG: Donn√©es manquantes - operation_id: '{operation_id}', commentaire: '{nouveau_commentaire}'")
                        return JsonResponse({'success': False, 'error': 'ID op√©ration et commentaire requis'})
                    
                    # R√©cup√©rer et mettre √† jour l'op√©ration
                    operation = Operation.objects.get(id=operation_id, commande=commande)
                    ancien_commentaire = operation.conclusion
                    
                    print(f"üìã DEBUG: Ancien commentaire: '{ancien_commentaire}'")
                    
                    operation.conclusion = nouveau_commentaire
                    operation.operateur = operateur  # Mettre √† jour l'op√©rateur qui modifie
                    operation.save()
                    
                    print(f"‚úÖ DEBUG: Op√©ration {operation_id} sauvegard√©e en base de donn√©es")
                    
                    # V√©rification post-sauvegarde
                    operation_verif = Operation.objects.get(id=operation_id)
                    print(f"üîç DEBUG: V√©rification en base: conclusion = '{operation_verif.conclusion}'")
                    
                    # V√©rifier toutes les op√©rations de cette commande
                    toutes_operations = Operation.objects.filter(commande=commande)
                    print(f"üìä DEBUG: {toutes_operations.count()} op√©ration(s) totales pour cette commande:")
                    for op in toutes_operations:
                        print(f"   - ID {op.id}: {op.type_operation} - '{op.conclusion}'")
                    
                    return JsonResponse({
                        'success': True,
                        'message': 'Op√©ration mise √† jour avec succ√®s en base de donn√©es',
                        'operation_id': operation_id,
                        'nouveau_commentaire': nouveau_commentaire,
                        'ancien_commentaire': ancien_commentaire,
                        'debug_info': {
                            'verification_conclusion': operation_verif.conclusion,
                            'total_operations': toutes_operations.count()
                        }
                    })
                    
                except Operation.DoesNotExist:
                    print(f"‚ùå DEBUG: Op√©ration {operation_id} introuvable pour commande {commande.id}")
                    return JsonResponse({'success': False, 'error': 'Op√©ration introuvable'})
                except Exception as e:
                    print(f"‚ùå DEBUG: Erreur mise √† jour op√©ration: {str(e)}")
                    import traceback
                    traceback.print_exc()
                    return JsonResponse({'success': False, 'error': str(e)})
            
            elif action == 'create_operation':
                # Cr√©er une nouvelle op√©ration imm√©diatement
                try:
                    from commande.models import Operation
                    
                    type_operation = request.POST.get('type_operation')
                    commentaire = request.POST.get('commentaire', '').strip()
                    
                    print(f"üÜï DEBUG: Cr√©ation nouvelle op√©ration pour commande {commande.id}")
                    print(f"üìù DEBUG: Type: '{type_operation}', Commentaire: '{commentaire}'")
                    print(f"üîç DEBUG: Donn√©es POST re√ßues: {dict(request.POST)}")
                    
                    if not type_operation or not commentaire:
                        print(f"‚ùå DEBUG: Donn√©es manquantes - type: '{type_operation}', commentaire: '{commentaire}'")
                        return JsonResponse({'success': False, 'error': 'Type d\'op√©ration et commentaire requis'})
                    
                    # Cr√©er la nouvelle op√©ration
                    nouvelle_operation = Operation.objects.create(
                        type_operation=type_operation,
                        conclusion=commentaire,
                        commande=commande,
                        operateur=operateur
                    )
                    
                    print(f"‚úÖ DEBUG: Nouvelle op√©ration cr√©√©e avec ID: {nouvelle_operation.id}")
                    
                    # V√©rifier toutes les op√©rations de cette commande
                    toutes_operations = Operation.objects.filter(commande=commande)
                    print(f"üìä DEBUG: {toutes_operations.count()} op√©ration(s) totales pour cette commande:")
                    for op in toutes_operations:
                        print(f"   - ID {op.id}: {op.type_operation} - '{op.conclusion}'")
                    
                    return JsonResponse({
                        'success': True,
                        'message': 'Nouvelle op√©ration cr√©√©e avec succ√®s en base de donn√©es',
                        'operation_id': nouvelle_operation.id,
                        'type_operation': nouvelle_operation.type_operation,
                        'commentaire': nouvelle_operation.conclusion,
                        'debug_info': {
                            'total_operations': toutes_operations.count(),
                            'operation_date': nouvelle_operation.date_operation.strftime('%d/%m/%Y %H:%M')
                        }
                    })
                    
                except Exception as e:
                    print(f"‚ùå DEBUG: Erreur cr√©ation op√©ration: {str(e)}")
                    import traceback
                    traceback.print_exc()
                    return JsonResponse({'success': False, 'error': str(e)})
            
            elif action == 'save_livraison':
                # Sauvegarder seulement l'adresse de livraison (saisie manuelle)
                try:
                    adresse = request.POST.get('adresse_livraison', '').strip()
                    
                    # Mettre √† jour seulement l'adresse (pas obligatoire)
                    commande.adresse = adresse
                    
                    # Sauvegarder les modifications
                    commande.save()
                    
                    message = 'Adresse de livraison sauvegard√©e avec succ√®s' if adresse else 'Section livraison valid√©e'
                    
                    return JsonResponse({
                        'success': True,
                        'message': message,
                        'adresse': adresse
                    })
                    
                except Exception as e:
                    return JsonResponse({'success': False, 'error': str(e)})
            
            # ================ TRAITEMENT NORMAL DU FORMULAIRE ================
            
            # Mise √† jour des informations client
            commande.client.nom = request.POST.get('client_nom', '').strip()
            commande.client.prenom = request.POST.get('client_prenom', '').strip()
            commande.client.numero_tel = request.POST.get('client_telephone', '').strip()
            commande.client.save()
            
            # Mise √† jour de la date de commande
            date_cmd = request.POST.get('date_cmd')
            if date_cmd:
                from datetime import datetime
                commande.date_cmd = datetime.strptime(date_cmd, '%Y-%m-%d').date()
            
            # Mise √† jour de la ville et de l'adresse
            ville_id = request.POST.get('ville_livraison')
            if ville_id:
                nouvelle_ville = Ville.objects.get(id=ville_id)
                commande.ville = nouvelle_ville
            
            adresse = request.POST.get('adresse_livraison', '').strip()
            if adresse:
                commande.adresse = adresse
            
            # Mise √† jour du champ upsell
            is_upsell = request.POST.get('is_upsell', 'false')
            commande.is_upsell = (is_upsell == 'true')
            
            # ================ GESTION DES ARTICLES/PANIERS ================
            
            # 1. Gestion des articles supprim√©s
            articles_supprimes = request.POST.getlist('deleted_articles[]')
            if articles_supprimes:
                from commande.models import Panier
                for panier_id in articles_supprimes:
                    try:
                        panier = Panier.objects.get(id=panier_id, commande=commande)
                        panier.delete()
                    except Panier.DoesNotExist:
                        pass
            
            # 2. Gestion des articles modifi√©s
            articles_modifies = request.POST.getlist('modified_articles[]')
            nouvelles_quantites = request.POST.getlist('modified_quantities[]')
            
            if articles_modifies and nouvelles_quantites:
                from commande.models import Panier
                for i, panier_id in enumerate(articles_modifies):
                    if i < len(nouvelles_quantites):
                        try:
                            panier = Panier.objects.get(id=panier_id, commande=commande)
                            nouvelle_quantite = int(nouvelles_quantites[i])
                            if nouvelle_quantite > 0:
                                panier.quantite = nouvelle_quantite
                                # Recalculer le sous-total
                                panier.sous_total = panier.article.prix_unitaire * nouvelle_quantite
                                panier.save()
                        except (Panier.DoesNotExist, ValueError):
                            continue
            
            # 3. Gestion des nouveaux articles
            nouveaux_articles = request.POST.getlist('new_articles[]')
            quantites_nouveaux = request.POST.getlist('new_quantities[]')
            
            if nouveaux_articles and quantites_nouveaux:
                from article.models import Article
                from commande.models import Panier
                
                for i, article_id in enumerate(nouveaux_articles):
                    if i < len(quantites_nouveaux):
                        try:
                            article = Article.objects.get(id=article_id)
                            quantite = int(quantites_nouveaux[i])
                            if quantite > 0:
                                sous_total = article.prix_unitaire * quantite
                                Panier.objects.create(
                                    commande=commande,
                                    article=article,
                                    quantite=quantite,
                                    sous_total=sous_total
                                )
                        except (Article.DoesNotExist, ValueError):
                            continue
            
            # 4. Recalculer le total de la commande
            total_commande = commande.paniers.aggregate(
                total=models.Sum('sous_total')
            )['total'] or 0
            commande.total_cmd = total_commande
            commande.save()
            
            # ================ GESTION DES OP√âRATIONS ================
            
            # Gestion des op√©rations individuelles avec commentaires sp√©cifiques
            operations_selectionnees = request.POST.getlist('operations[]')
            operations_creees = []
            
            for type_operation in operations_selectionnees:
                if type_operation:  # V√©rifier que le type n'est pas vide
                    # R√©cup√©rer le commentaire sp√©cifique √† cette op√©ration
                    commentaire_specifique = request.POST.get(f'comment_{type_operation}', '').strip()
                    
                    # L'op√©rateur DOIT saisir un commentaire - pas de commentaire automatique
                    if commentaire_specifique:
                        # Cr√©er l'op√©ration avec le commentaire saisi par l'op√©rateur
                        operation = Operation.objects.create(
                            type_operation=type_operation,
                            conclusion=commentaire_specifique,
                            commande=commande,
                            operateur=operateur
                        )
                        operations_creees.append(operation)
                    else:
                        # Ignorer l'op√©ration si aucun commentaire n'est fourni
                        messages.warning(request, f"Op√©ration {type_operation} ignor√©e : aucun commentaire fourni par l'op√©rateur.")
            
            # Messages de succ√®s
            messages_success = []
            if operations_creees:
                operations_names = [op.get_type_operation_display() for op in operations_creees]
                messages_success.append(f'Op√©rations ajout√©es : {", ".join(operations_names)}')
            
            # Compter les modifications d'articles
            nb_articles_modifies = len(articles_supprimes) + len(articles_modifies) + len(nouveaux_articles)
            if nb_articles_modifies > 0:
                messages_success.append(f'{nb_articles_modifies} modification(s) d\'articles appliqu√©e(s)')
            
            # V√©rifier si c'est une requ√™te AJAX pour la sauvegarde automatique
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest' or 'application/json' in request.headers.get('Accept', ''):
                # R√©ponse JSON pour les requ√™tes AJAX
                response_data = {
                    'success': True,
                    'message': 'Modifications sauvegard√©es avec succ√®s',
                    'total_commande': float(commande.total_cmd),
                    'nb_articles': commande.paniers.count(),
                }
                
                if operations_creees:
                    operations_names = [op.get_type_operation_display() for op in operations_creees]
                    response_data['operations_ajoutees'] = operations_names
                
                if nb_articles_modifies > 0:
                    response_data['articles_modifies'] = nb_articles_modifies
                
                return JsonResponse(response_data)
            else:
                # R√©ponse normale avec redirect pour les soumissions manuelles
                if messages_success:
                    messages.success(request, f'Commande modifi√©e avec succ√®s. {" | ".join(messages_success)}')
                else:
                    messages.success(request, 'Commande modifi√©e avec succ√®s.')
                    
                return redirect('operatConfirme:modifier_commande', commande_id=commande_id)
            
        except Exception as e:
            messages.error(request, f'Erreur lors de la modification : {str(e)}')
    
    # R√©cup√©rer toutes les villes pour la liste d√©roulante
    villes = Ville.objects.select_related('region').order_by('region__nom_region', 'nom')
    
    context = {
        'commande': commande,
        'operateur': operateur,
        'villes': villes,
    }
    
    return render(request, 'operatConfirme/modifier_commande.html', context)

@login_required
def api_operations_commande(request, commande_id):
    """API pour r√©cup√©rer les op√©rations d'une commande mises √† jour"""
    try:
        # V√©rifier que l'utilisateur est un op√©rateur de confirmation
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
        
        # R√©cup√©rer la commande
        commande = Commande.objects.get(id=commande_id)
        
        # R√©cup√©rer toutes les op√©rations de cette commande
        operations = commande.operations.all().order_by('date_operation')
        
        operations_data = []
        for operation in operations:
            # D√©terminer la classe CSS selon le type d'op√©ration
            if operation.type_operation == "APPEL":
                classe_css = 'bg-blue-100 text-blue-800'
            elif operation.type_operation == "ENVOI_SMS":
                classe_css = 'bg-green-100 text-green-800'
            elif "Whatsapp" in operation.type_operation:
                classe_css = 'bg-emerald-100 text-emerald-800'
            else:
                classe_css = 'bg-gray-100 text-gray-800'
            
            # D√©terminer le type principal
            if operation.type_operation == "APPEL":
                type_principal = 'APPEL'
            elif operation.type_operation == "ENVOI_SMS":
                type_principal = 'SMS'
            elif "Whatsapp" in operation.type_operation:
                type_principal = 'WHATSAPP'
            else:
                type_principal = 'OTHER'
            
            operations_data.append({
                'id': operation.id,
                'type_operation': operation.type_operation,
                'nom_display': operation.get_type_operation_display(),
                'classe_css': classe_css,
                'date_operation': operation.date_operation.strftime('%d/%m/%Y %H:%M'),
                'conclusion': operation.conclusion or '',
                'type_principal': type_principal
            })
        
        return JsonResponse({
            'success': True,
            'operations': operations_data,
            'count': len(operations_data)
        })
        
    except Operateur.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': 'Utilisateur non autoris√©'
        })
    except Commande.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': 'Commande introuvable'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@login_required
def api_articles_disponibles(request):
    """API pour r√©cup√©rer la liste des articles disponibles pour la s√©lection"""
    try:
        # V√©rifier que l'utilisateur est un op√©rateur de confirmation
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
        print(f"‚úÖ Op√©rateur trouv√©: {operateur.nom} {operateur.prenom} (Type: {operateur.type_operateur})")
    except Operateur.DoesNotExist:
        error_msg = f'Utilisateur {request.user.username} n\'est pas un op√©rateur de confirmation'
        print(f"‚ùå {error_msg}")
        
        # Debug: afficher les informations de l'utilisateur
        try:
            user_operateur = Operateur.objects.get(user=request.user)
            print(f"üîç Utilisateur trouv√© comme op√©rateur: {user_operateur.type_operateur}")
        except Operateur.DoesNotExist:
            print(f"üîç Aucun profil op√©rateur trouv√© pour: {request.user.username}")
        
        return JsonResponse({
            'success': False,
            'error': error_msg,
            'debug_info': {
                'user': str(request.user),
                'is_authenticated': request.user.is_authenticated,
                'user_id': request.user.id if request.user.is_authenticated else None
            }
        }, status=403)
    
    if request.method == 'GET':
        try:
            from article.models import Article
            
            print("üîç Recherche d'articles disponibles...")
            
            # R√©cup√©rer tous les articles actifs avec stock disponible
            articles = Article.objects.filter(
                qte_disponible__gt=0,
                actif=True
            ).order_by('nom', 'couleur', 'pointure')
            
            print(f"üì¶ {articles.count()} articles trouv√©s dans la base")
            
            articles_data = []
            for article in articles:
                try:
                    article_data = {
                        'id': article.id,
                        'nom': article.nom or 'Article sans nom',
                        'reference': article.reference or f'REF-{article.id}',
                        'prix_unitaire': float(article.prix_unitaire) if article.prix_unitaire else 0.0,
                        'description': article.description or '',
                        'qte_disponible': article.qte_disponible,
                        'categorie': article.categorie or 'Non sp√©cifi√©e',
                        'couleur': article.couleur or 'Non sp√©cifi√©e',
                        'pointure': article.pointure or 'Non sp√©cifi√©e',
                    }
                    articles_data.append(article_data)
                    
                    print(f"   ‚úÖ Article {article.id}: {article.nom} - {article.prix_unitaire} DH")
                    
                except Exception as e:
                    print(f"   ‚ùå Erreur lors du traitement de l'article {article.id}: {e}")
                    continue
            
            print(f"‚úÖ {len(articles_data)} articles format√©s pour l'API")
            
            return JsonResponse({
                'success': True,
                'articles': articles_data,
                'count': len(articles_data)
            })
            
        except Exception as e:
            error_msg = f'Erreur lors de la r√©cup√©ration des articles: {str(e)}'
            print(f"‚ùå {error_msg}")
            return JsonResponse({
                'success': False,
                'error': error_msg
            }, status=500)
    
    return JsonResponse({
        'success': False,
        'error': 'M√©thode non autoris√©e'
    }, status=405)

@login_required
def api_commentaires_disponibles(request):
    """API pour r√©cup√©rer la liste des commentaires pr√©d√©finis depuis le mod√®le"""
    try:
        # V√©rifier que l'utilisateur est un op√©rateur de confirmation
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        return JsonResponse({'error': 'Acc√®s non autoris√©'}, status=403)
    
    if request.method == 'GET':
        from commande.models import Operation
        
        # R√©cup√©rer les choix de commentaires depuis le mod√®le
        commentaires_choices = Operation.Type_Commentaire_CHOICES
        
        # Convertir en format utilisable par le frontend
        commentaires_data = {
            'APPEL': [],
            'ENVOI_SMS': [],
            'Appel Whatsapp': [],
            'Message Whatsapp': [],
            'Vocal Whatsapp': []
        }
        
        # Tous les commentaires sont utilisables pour tous les types d'op√©rations
        for choice_value, choice_label in commentaires_choices:
            commentaire_item = {
                'value': choice_value,
                'label': choice_label
            }
            
            # Ajouter le commentaire √† tous les types d'op√©rations
            for type_operation in commentaires_data.keys():
                commentaires_data[type_operation].append(commentaire_item)
        
        return JsonResponse({
            'success': True,
            'commentaires': commentaires_data
        })
    
    return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)

@login_required
def creer_commande(request):
    """Cr√©er une nouvelle commande - Interface op√©rateur de confirmation"""
    try:
        # R√©cup√©rer le profil op√©rateur de l'utilisateur connect√©
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        messages.error(request, "Profil d'op√©rateur de confirmation non trouv√©.")
        return redirect('login')

    if request.method == 'POST':
        try:
            with transaction.atomic():
                # R√©cup√©rer les donn√©es du formulaire
                type_client = request.POST.get('type_client')
                ville_id = request.POST.get('ville_livraison')
                adresse = request.POST.get('adresse', '').strip()
                is_upsell = request.POST.get('is_upsell') == 'on'

                # Valider la pr√©sence de la ville et de l'adresse
                if not ville_id or not adresse:
                    messages.error(request, "Veuillez s√©lectionner une ville et fournir une adresse.")
                    return redirect('operatConfirme:creer_commande')

                # G√©rer le client selon le type
                if type_client == 'existant':
                    client_id = request.POST.get('client')
                    if not client_id:
                        messages.error(request, "Veuillez s√©lectionner un client existant.")
                        return redirect('operatConfirme:creer_commande')
                    client = get_object_or_404(Client, pk=client_id)
                else:  # nouveau client
                    # R√©cup√©rer les donn√©es du nouveau client
                    nouveau_prenom = request.POST.get('nouveau_prenom', '').strip()
                    nouveau_nom = request.POST.get('nouveau_nom', '').strip()
                    nouveau_telephone = request.POST.get('nouveau_telephone', '').strip()
                    nouveau_email = request.POST.get('nouveau_email', '').strip()

                    # Validation des champs obligatoires pour nouveau client
                    if not all([nouveau_prenom, nouveau_nom, nouveau_telephone]):
                        messages.error(request, "Veuillez remplir tous les champs obligatoires du nouveau client (pr√©nom, nom, t√©l√©phone).")
                        return redirect('operatConfirme:creer_commande')

                    # V√©rifier si le t√©l√©phone existe d√©j√†
                    if Client.objects.filter(numero_tel=nouveau_telephone).exists():
                        messages.warning(request, f"Un client avec le num√©ro {nouveau_telephone} existe d√©j√†. Utilisez 'Client existant' ou modifiez le num√©ro.")
                        return redirect('operatConfirme:creer_commande')

                    # Cr√©er le nouveau client
                    client = Client.objects.create(
                        prenom=nouveau_prenom,
                        nom=nouveau_nom,
                        numero_tel=nouveau_telephone,
                        email=nouveau_email if nouveau_email else None,
                        is_active=True
                    )

                ville = get_object_or_404(Ville, pk=ville_id)

                # Cr√©er la commande avec un total temporaire de 0
                commande = Commande.objects.create(
                    client=client,
                    ville=ville,
                    adresse=adresse,
                    total_cmd=0,  # Le total sera recalcul√© c√¥t√© serveur
                    is_upsell=is_upsell,
                    origine='OC'  # D√©finir l'origine comme Op√©rateur Confirmation
                )

                # Traiter le panier et calculer le total
                article_ids = request.POST.getlist('article_id')
                quantites = request.POST.getlist('quantite')
                
                if not article_ids:
                    messages.warning(request, "La commande a √©t√© cr√©√©e mais est vide. Aucun article n'a √©t√© ajout√©.")
                
                total_calcule = 0
                for i, article_id in enumerate(article_ids):
                    try:
                        quantite = int(quantites[i])
                        if quantite > 0 and article_id:
                            article = get_object_or_404(Article, pk=article_id)
                            sous_total = article.prix_unitaire * quantite
                            total_calcule += sous_total
                            
                            Panier.objects.create(
                                commande=commande,
                                article=article,
                                quantite=quantite,
                                sous_total=sous_total
                            )
                    except (ValueError, IndexError, Article.DoesNotExist) as e:
                        messages.error(request, f"Erreur lors de l'ajout d'un article : {e}")
                        raise e # Annule la transaction

                # Mettre √† jour le total final de la commande avec le montant recalcul√©
                commande.total_cmd = total_calcule
                commande.save()

                # Cr√©er l'√©tat initial "Affect√©e" directement √† l'op√©rateur cr√©ateur
                try:
                    etat_affectee = EnumEtatCmd.objects.get(libelle='Affect√©e')
                    EtatCommande.objects.create(
                        commande=commande,
                        enum_etat=etat_affectee,
                        operateur=operateur,
                        commentaire=f"Commande cr√©√©e et auto-affect√©e √† {operateur.nom_complet}"
                    )
                except EnumEtatCmd.DoesNotExist:
                    try:
                        etat_initial = EnumEtatCmd.objects.get(libelle='Non affect√©e')
                        EtatCommande.objects.create(
                            commande=commande,
                            enum_etat=etat_initial,
                            commentaire=f"Commande cr√©√©e par {operateur.nom_complet}"
                        )
                    except EnumEtatCmd.DoesNotExist:
                        pass # Si aucun √©tat n'existe, cr√©er sans √©tat initial
                
                # Composer le message de succ√®s final
                message_final = f"Commande YZ-{commande.id_yz} cr√©√©e avec succ√®s."
                if type_client != 'existant':
                    message_final = f"Nouveau client '{client.get_full_name}' cr√©√©. " + message_final

                messages.success(request, message_final)
                return redirect('operatConfirme:liste_commandes')

        except Exception as e:
            messages.error(request, f"Erreur critique lors de la cr√©ation de la commande: {str(e)}")
            # Rediriger vers le formulaire pour correction
            return redirect('operatConfirme:creer_commande')

    # GET request - afficher le formulaire
    clients = Client.objects.all().order_by('prenom', 'nom')
    articles = Article.objects.all().order_by('nom')
    villes = Ville.objects.select_related('region').order_by('region__nom_region', 'nom')

    context = {
        'operateur': operateur,
        'clients': clients,
        'articles': articles,
        'villes': villes,
    }

    return render(request, 'operatConfirme/creer_commande.html', context)

@login_required
def api_panier_commande(request, commande_id):
    """API pour r√©cup√©rer le contenu du panier d'une commande"""
    try:
        # V√©rifier que l'utilisateur est un op√©rateur de confirmation
        operateur = Operateur.objects.get(user=request.user, type_operateur='CONFIRMATION')
    except Operateur.DoesNotExist:
        return JsonResponse({'error': 'Acc√®s non autoris√©'}, status=403)
    
    if request.method == 'GET':
        try:
            # R√©cup√©rer la commande avec ses paniers
            commande = get_object_or_404(
                Commande.objects.select_related('client', 'ville').prefetch_related(
                    'paniers__article'
                ),
                pk=commande_id
            )
            
            # V√©rifier que la commande est affect√©e √† cet op√©rateur ou qu'il peut la voir
            etat_actuel = commande.etats.filter(
                operateur=operateur,
                date_fin__isnull=True
            ).first()
            
            if not etat_actuel:
                return JsonResponse({'error': 'Cette commande ne vous est pas affect√©e'}, status=403)
            
            # Pr√©parer les donn√©es pour le template
            paniers = commande.paniers.all()
            total_articles = sum(panier.quantite for panier in paniers)
            total_montant = sum(panier.sous_total for panier in paniers)
            frais_livraison = commande.ville.frais_livraison if commande.ville else 0
            total_final = total_montant + frais_livraison
            
            # Construire la liste des articles pour le JSON
            articles_data = []
            for panier in paniers:
                articles_data.append({
                    'nom': str(panier.article.nom),
                    'reference': str(panier.article.reference) if panier.article.reference else 'N/A',
                    'description': str(panier.article.description) if panier.article.description else '',
                    'prix_unitaire': float(panier.article.prix_unitaire),
                    'quantite': panier.quantite,
                    'sous_total': float(panier.sous_total)
                })
            
            return JsonResponse({
                'success': True,
                'commande': {
                    'id_yz': commande.id_yz,
                    'client_nom': str(commande.client.get_full_name),
                    'total_articles': total_articles,
                    'total_montant': float(total_montant),
                    'frais_livraison': float(frais_livraison),
                    'total_final': float(total_final)
                },
                'articles': articles_data
            })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': f'Erreur lors de la r√©cup√©ration du panier: {str(e)}'
            }, status=500)
    
    return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)



